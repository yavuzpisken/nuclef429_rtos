
RTOS_LED_TOGGLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006488  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067bc  080067bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067c4  080067c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c4  080067c4  000167c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080067cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e18  20000074  08006840  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e8c  08006840  00024e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165b8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002be2  00000000  00000000  0003665c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  00039240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f50  00000000  00000000  0003a2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000035a0  00000000  00000000  0003b218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d8c4  00000000  00000000  0003e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc896  00000000  00000000  0004c07c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128912  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ec  00000000  00000000  00128990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006620 	.word	0x08006620

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006620 	.word	0x08006620

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2f>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000610:	bf24      	itt	cs
 8000612:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000616:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800061a:	d90d      	bls.n	8000638 <__aeabi_d2f+0x30>
 800061c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000620:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000624:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000628:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800062c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000630:	bf08      	it	eq
 8000632:	f020 0001 	biceq.w	r0, r0, #1
 8000636:	4770      	bx	lr
 8000638:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800063c:	d121      	bne.n	8000682 <__aeabi_d2f+0x7a>
 800063e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000642:	bfbc      	itt	lt
 8000644:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000648:	4770      	bxlt	lr
 800064a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000652:	f1c2 0218 	rsb	r2, r2, #24
 8000656:	f1c2 0c20 	rsb	ip, r2, #32
 800065a:	fa10 f30c 	lsls.w	r3, r0, ip
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	bf18      	it	ne
 8000664:	f040 0001 	orrne.w	r0, r0, #1
 8000668:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000670:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000674:	ea40 000c 	orr.w	r0, r0, ip
 8000678:	fa23 f302 	lsr.w	r3, r3, r2
 800067c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000680:	e7cc      	b.n	800061c <__aeabi_d2f+0x14>
 8000682:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000686:	d107      	bne.n	8000698 <__aeabi_d2f+0x90>
 8000688:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800068c:	bf1e      	ittt	ne
 800068e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000692:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000696:	4770      	bxne	lr
 8000698:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800069c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_uldivmod>:
 80006a8:	b953      	cbnz	r3, 80006c0 <__aeabi_uldivmod+0x18>
 80006aa:	b94a      	cbnz	r2, 80006c0 <__aeabi_uldivmod+0x18>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	bf08      	it	eq
 80006b0:	2800      	cmpeq	r0, #0
 80006b2:	bf1c      	itt	ne
 80006b4:	f04f 31ff 	movne.w	r1, #4294967295
 80006b8:	f04f 30ff 	movne.w	r0, #4294967295
 80006bc:	f000 b972 	b.w	80009a4 <__aeabi_idiv0>
 80006c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c8:	f000 f806 	bl	80006d8 <__udivmoddi4>
 80006cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9e08      	ldr	r6, [sp, #32]
 80006de:	4604      	mov	r4, r0
 80006e0:	4688      	mov	r8, r1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d14b      	bne.n	800077e <__udivmoddi4+0xa6>
 80006e6:	428a      	cmp	r2, r1
 80006e8:	4615      	mov	r5, r2
 80006ea:	d967      	bls.n	80007bc <__udivmoddi4+0xe4>
 80006ec:	fab2 f282 	clz	r2, r2
 80006f0:	b14a      	cbz	r2, 8000706 <__udivmoddi4+0x2e>
 80006f2:	f1c2 0720 	rsb	r7, r2, #32
 80006f6:	fa01 f302 	lsl.w	r3, r1, r2
 80006fa:	fa20 f707 	lsr.w	r7, r0, r7
 80006fe:	4095      	lsls	r5, r2
 8000700:	ea47 0803 	orr.w	r8, r7, r3
 8000704:	4094      	lsls	r4, r2
 8000706:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800070a:	0c23      	lsrs	r3, r4, #16
 800070c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000710:	fa1f fc85 	uxth.w	ip, r5
 8000714:	fb0e 8817 	mls	r8, lr, r7, r8
 8000718:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800071c:	fb07 f10c 	mul.w	r1, r7, ip
 8000720:	4299      	cmp	r1, r3
 8000722:	d909      	bls.n	8000738 <__udivmoddi4+0x60>
 8000724:	18eb      	adds	r3, r5, r3
 8000726:	f107 30ff 	add.w	r0, r7, #4294967295
 800072a:	f080 811b 	bcs.w	8000964 <__udivmoddi4+0x28c>
 800072e:	4299      	cmp	r1, r3
 8000730:	f240 8118 	bls.w	8000964 <__udivmoddi4+0x28c>
 8000734:	3f02      	subs	r7, #2
 8000736:	442b      	add	r3, r5
 8000738:	1a5b      	subs	r3, r3, r1
 800073a:	b2a4      	uxth	r4, r4
 800073c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000740:	fb0e 3310 	mls	r3, lr, r0, r3
 8000744:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000748:	fb00 fc0c 	mul.w	ip, r0, ip
 800074c:	45a4      	cmp	ip, r4
 800074e:	d909      	bls.n	8000764 <__udivmoddi4+0x8c>
 8000750:	192c      	adds	r4, r5, r4
 8000752:	f100 33ff 	add.w	r3, r0, #4294967295
 8000756:	f080 8107 	bcs.w	8000968 <__udivmoddi4+0x290>
 800075a:	45a4      	cmp	ip, r4
 800075c:	f240 8104 	bls.w	8000968 <__udivmoddi4+0x290>
 8000760:	3802      	subs	r0, #2
 8000762:	442c      	add	r4, r5
 8000764:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000768:	eba4 040c 	sub.w	r4, r4, ip
 800076c:	2700      	movs	r7, #0
 800076e:	b11e      	cbz	r6, 8000778 <__udivmoddi4+0xa0>
 8000770:	40d4      	lsrs	r4, r2
 8000772:	2300      	movs	r3, #0
 8000774:	e9c6 4300 	strd	r4, r3, [r6]
 8000778:	4639      	mov	r1, r7
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0xbe>
 8000782:	2e00      	cmp	r6, #0
 8000784:	f000 80eb 	beq.w	800095e <__udivmoddi4+0x286>
 8000788:	2700      	movs	r7, #0
 800078a:	e9c6 0100 	strd	r0, r1, [r6]
 800078e:	4638      	mov	r0, r7
 8000790:	4639      	mov	r1, r7
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f783 	clz	r7, r3
 800079a:	2f00      	cmp	r7, #0
 800079c:	d147      	bne.n	800082e <__udivmoddi4+0x156>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0xd0>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80fa 	bhi.w	800099c <__udivmoddi4+0x2c4>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0303 	sbc.w	r3, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	4698      	mov	r8, r3
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d0e0      	beq.n	8000778 <__udivmoddi4+0xa0>
 80007b6:	e9c6 4800 	strd	r4, r8, [r6]
 80007ba:	e7dd      	b.n	8000778 <__udivmoddi4+0xa0>
 80007bc:	b902      	cbnz	r2, 80007c0 <__udivmoddi4+0xe8>
 80007be:	deff      	udf	#255	; 0xff
 80007c0:	fab2 f282 	clz	r2, r2
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	f040 808f 	bne.w	80008e8 <__udivmoddi4+0x210>
 80007ca:	1b49      	subs	r1, r1, r5
 80007cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007d0:	fa1f f885 	uxth.w	r8, r5
 80007d4:	2701      	movs	r7, #1
 80007d6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fb0e 111c 	mls	r1, lr, ip, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb08 f10c 	mul.w	r1, r8, ip
 80007e8:	4299      	cmp	r1, r3
 80007ea:	d907      	bls.n	80007fc <__udivmoddi4+0x124>
 80007ec:	18eb      	adds	r3, r5, r3
 80007ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007f2:	d202      	bcs.n	80007fa <__udivmoddi4+0x122>
 80007f4:	4299      	cmp	r1, r3
 80007f6:	f200 80cd 	bhi.w	8000994 <__udivmoddi4+0x2bc>
 80007fa:	4684      	mov	ip, r0
 80007fc:	1a59      	subs	r1, r3, r1
 80007fe:	b2a3      	uxth	r3, r4
 8000800:	fbb1 f0fe 	udiv	r0, r1, lr
 8000804:	fb0e 1410 	mls	r4, lr, r0, r1
 8000808:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800080c:	fb08 f800 	mul.w	r8, r8, r0
 8000810:	45a0      	cmp	r8, r4
 8000812:	d907      	bls.n	8000824 <__udivmoddi4+0x14c>
 8000814:	192c      	adds	r4, r5, r4
 8000816:	f100 33ff 	add.w	r3, r0, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x14a>
 800081c:	45a0      	cmp	r8, r4
 800081e:	f200 80b6 	bhi.w	800098e <__udivmoddi4+0x2b6>
 8000822:	4618      	mov	r0, r3
 8000824:	eba4 0408 	sub.w	r4, r4, r8
 8000828:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800082c:	e79f      	b.n	800076e <__udivmoddi4+0x96>
 800082e:	f1c7 0c20 	rsb	ip, r7, #32
 8000832:	40bb      	lsls	r3, r7
 8000834:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000838:	ea4e 0e03 	orr.w	lr, lr, r3
 800083c:	fa01 f407 	lsl.w	r4, r1, r7
 8000840:	fa20 f50c 	lsr.w	r5, r0, ip
 8000844:	fa21 f30c 	lsr.w	r3, r1, ip
 8000848:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800084c:	4325      	orrs	r5, r4
 800084e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000852:	0c2c      	lsrs	r4, r5, #16
 8000854:	fb08 3319 	mls	r3, r8, r9, r3
 8000858:	fa1f fa8e 	uxth.w	sl, lr
 800085c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000860:	fb09 f40a 	mul.w	r4, r9, sl
 8000864:	429c      	cmp	r4, r3
 8000866:	fa02 f207 	lsl.w	r2, r2, r7
 800086a:	fa00 f107 	lsl.w	r1, r0, r7
 800086e:	d90b      	bls.n	8000888 <__udivmoddi4+0x1b0>
 8000870:	eb1e 0303 	adds.w	r3, lr, r3
 8000874:	f109 30ff 	add.w	r0, r9, #4294967295
 8000878:	f080 8087 	bcs.w	800098a <__udivmoddi4+0x2b2>
 800087c:	429c      	cmp	r4, r3
 800087e:	f240 8084 	bls.w	800098a <__udivmoddi4+0x2b2>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4473      	add	r3, lr
 8000888:	1b1b      	subs	r3, r3, r4
 800088a:	b2ad      	uxth	r5, r5
 800088c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000890:	fb08 3310 	mls	r3, r8, r0, r3
 8000894:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000898:	fb00 fa0a 	mul.w	sl, r0, sl
 800089c:	45a2      	cmp	sl, r4
 800089e:	d908      	bls.n	80008b2 <__udivmoddi4+0x1da>
 80008a0:	eb1e 0404 	adds.w	r4, lr, r4
 80008a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008a8:	d26b      	bcs.n	8000982 <__udivmoddi4+0x2aa>
 80008aa:	45a2      	cmp	sl, r4
 80008ac:	d969      	bls.n	8000982 <__udivmoddi4+0x2aa>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4474      	add	r4, lr
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	fba0 8902 	umull	r8, r9, r0, r2
 80008ba:	eba4 040a 	sub.w	r4, r4, sl
 80008be:	454c      	cmp	r4, r9
 80008c0:	46c2      	mov	sl, r8
 80008c2:	464b      	mov	r3, r9
 80008c4:	d354      	bcc.n	8000970 <__udivmoddi4+0x298>
 80008c6:	d051      	beq.n	800096c <__udivmoddi4+0x294>
 80008c8:	2e00      	cmp	r6, #0
 80008ca:	d069      	beq.n	80009a0 <__udivmoddi4+0x2c8>
 80008cc:	ebb1 050a 	subs.w	r5, r1, sl
 80008d0:	eb64 0403 	sbc.w	r4, r4, r3
 80008d4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008d8:	40fd      	lsrs	r5, r7
 80008da:	40fc      	lsrs	r4, r7
 80008dc:	ea4c 0505 	orr.w	r5, ip, r5
 80008e0:	e9c6 5400 	strd	r5, r4, [r6]
 80008e4:	2700      	movs	r7, #0
 80008e6:	e747      	b.n	8000778 <__udivmoddi4+0xa0>
 80008e8:	f1c2 0320 	rsb	r3, r2, #32
 80008ec:	fa20 f703 	lsr.w	r7, r0, r3
 80008f0:	4095      	lsls	r5, r2
 80008f2:	fa01 f002 	lsl.w	r0, r1, r2
 80008f6:	fa21 f303 	lsr.w	r3, r1, r3
 80008fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008fe:	4338      	orrs	r0, r7
 8000900:	0c01      	lsrs	r1, r0, #16
 8000902:	fbb3 f7fe 	udiv	r7, r3, lr
 8000906:	fa1f f885 	uxth.w	r8, r5
 800090a:	fb0e 3317 	mls	r3, lr, r7, r3
 800090e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000912:	fb07 f308 	mul.w	r3, r7, r8
 8000916:	428b      	cmp	r3, r1
 8000918:	fa04 f402 	lsl.w	r4, r4, r2
 800091c:	d907      	bls.n	800092e <__udivmoddi4+0x256>
 800091e:	1869      	adds	r1, r5, r1
 8000920:	f107 3cff 	add.w	ip, r7, #4294967295
 8000924:	d22f      	bcs.n	8000986 <__udivmoddi4+0x2ae>
 8000926:	428b      	cmp	r3, r1
 8000928:	d92d      	bls.n	8000986 <__udivmoddi4+0x2ae>
 800092a:	3f02      	subs	r7, #2
 800092c:	4429      	add	r1, r5
 800092e:	1acb      	subs	r3, r1, r3
 8000930:	b281      	uxth	r1, r0
 8000932:	fbb3 f0fe 	udiv	r0, r3, lr
 8000936:	fb0e 3310 	mls	r3, lr, r0, r3
 800093a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800093e:	fb00 f308 	mul.w	r3, r0, r8
 8000942:	428b      	cmp	r3, r1
 8000944:	d907      	bls.n	8000956 <__udivmoddi4+0x27e>
 8000946:	1869      	adds	r1, r5, r1
 8000948:	f100 3cff 	add.w	ip, r0, #4294967295
 800094c:	d217      	bcs.n	800097e <__udivmoddi4+0x2a6>
 800094e:	428b      	cmp	r3, r1
 8000950:	d915      	bls.n	800097e <__udivmoddi4+0x2a6>
 8000952:	3802      	subs	r0, #2
 8000954:	4429      	add	r1, r5
 8000956:	1ac9      	subs	r1, r1, r3
 8000958:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800095c:	e73b      	b.n	80007d6 <__udivmoddi4+0xfe>
 800095e:	4637      	mov	r7, r6
 8000960:	4630      	mov	r0, r6
 8000962:	e709      	b.n	8000778 <__udivmoddi4+0xa0>
 8000964:	4607      	mov	r7, r0
 8000966:	e6e7      	b.n	8000738 <__udivmoddi4+0x60>
 8000968:	4618      	mov	r0, r3
 800096a:	e6fb      	b.n	8000764 <__udivmoddi4+0x8c>
 800096c:	4541      	cmp	r1, r8
 800096e:	d2ab      	bcs.n	80008c8 <__udivmoddi4+0x1f0>
 8000970:	ebb8 0a02 	subs.w	sl, r8, r2
 8000974:	eb69 020e 	sbc.w	r2, r9, lr
 8000978:	3801      	subs	r0, #1
 800097a:	4613      	mov	r3, r2
 800097c:	e7a4      	b.n	80008c8 <__udivmoddi4+0x1f0>
 800097e:	4660      	mov	r0, ip
 8000980:	e7e9      	b.n	8000956 <__udivmoddi4+0x27e>
 8000982:	4618      	mov	r0, r3
 8000984:	e795      	b.n	80008b2 <__udivmoddi4+0x1da>
 8000986:	4667      	mov	r7, ip
 8000988:	e7d1      	b.n	800092e <__udivmoddi4+0x256>
 800098a:	4681      	mov	r9, r0
 800098c:	e77c      	b.n	8000888 <__udivmoddi4+0x1b0>
 800098e:	3802      	subs	r0, #2
 8000990:	442c      	add	r4, r5
 8000992:	e747      	b.n	8000824 <__udivmoddi4+0x14c>
 8000994:	f1ac 0c02 	sub.w	ip, ip, #2
 8000998:	442b      	add	r3, r5
 800099a:	e72f      	b.n	80007fc <__udivmoddi4+0x124>
 800099c:	4638      	mov	r0, r7
 800099e:	e708      	b.n	80007b2 <__udivmoddi4+0xda>
 80009a0:	4637      	mov	r7, r6
 80009a2:	e6e9      	b.n	8000778 <__udivmoddi4+0xa0>

080009a4 <__aeabi_idiv0>:
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ac:	f000 fc80 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b0:	f000 f860 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b4:	f000 f94a 	bl	8000c4c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009b8:	f000 f8f0 	bl	8000b9c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009bc:	f000 f918 	bl	8000bf0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80009c0:	f000 f8c2 	bl	8000b48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009c4:	f002 fcb6 	bl	8003334 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Yavuz */
  YavuzHandle = osThreadNew(yavuz_init, NULL, &Yavuz_attributes);
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <main+0x88>)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4819      	ldr	r0, [pc, #100]	; (8000a34 <main+0x8c>)
 80009ce:	f002 fd1b 	bl	8003408 <osThreadNew>
 80009d2:	4602      	mov	r2, r0
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <main+0x90>)
 80009d6:	601a      	str	r2, [r3, #0]

  /* creation of Tarkan */
  TarkanHandle = osThreadNew(tarkan_init, NULL, &Tarkan_attributes);
 80009d8:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <main+0x94>)
 80009da:	2100      	movs	r1, #0
 80009dc:	4818      	ldr	r0, [pc, #96]	; (8000a40 <main+0x98>)
 80009de:	f002 fd13 	bl	8003408 <osThreadNew>
 80009e2:	4602      	mov	r2, r0
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <main+0x9c>)
 80009e6:	601a      	str	r2, [r3, #0]

  /* creation of Ayberk */
  AyberkHandle = osThreadNew(ayberk_init, NULL, &Ayberk_attributes);
 80009e8:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <main+0xa0>)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4817      	ldr	r0, [pc, #92]	; (8000a4c <main+0xa4>)
 80009ee:	f002 fd0b 	bl	8003408 <osThreadNew>
 80009f2:	4602      	mov	r2, r0
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <main+0xa8>)
 80009f6:	601a      	str	r2, [r3, #0]

  /* creation of Ahmet */
  AhmetHandle = osThreadNew(ahmet_init, NULL, &Ahmet_attributes);
 80009f8:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <main+0xac>)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4816      	ldr	r0, [pc, #88]	; (8000a58 <main+0xb0>)
 80009fe:	f002 fd03 	bl	8003408 <osThreadNew>
 8000a02:	4602      	mov	r2, r0
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <main+0xb4>)
 8000a06:	601a      	str	r2, [r3, #0]

  /* creation of Ferhat */
  FerhatHandle = osThreadNew(ferhat_init, NULL, &Ferhat_attributes);
 8000a08:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <main+0xb8>)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4815      	ldr	r0, [pc, #84]	; (8000a64 <main+0xbc>)
 8000a0e:	f002 fcfb 	bl	8003408 <osThreadNew>
 8000a12:	4602      	mov	r2, r0
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <main+0xc0>)
 8000a16:	601a      	str	r2, [r3, #0]

  /* creation of Tahir */
  TahirHandle = osThreadNew(ferhat_init, NULL, &Tahir_attributes);
 8000a18:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <main+0xc4>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4811      	ldr	r0, [pc, #68]	; (8000a64 <main+0xbc>)
 8000a1e:	f002 fcf3 	bl	8003408 <osThreadNew>
 8000a22:	4602      	mov	r2, r0
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <main+0xc8>)
 8000a26:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a28:	f002 fcb8 	bl	800339c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x84>
 8000a2e:	bf00      	nop
 8000a30:	08006698 	.word	0x08006698
 8000a34:	08000e31 	.word	0x08000e31
 8000a38:	20004df0 	.word	0x20004df0
 8000a3c:	080066bc 	.word	0x080066bc
 8000a40:	08000e51 	.word	0x08000e51
 8000a44:	20004df4 	.word	0x20004df4
 8000a48:	080066e0 	.word	0x080066e0
 8000a4c:	08000e71 	.word	0x08000e71
 8000a50:	20004dec 	.word	0x20004dec
 8000a54:	08006704 	.word	0x08006704
 8000a58:	08000e91 	.word	0x08000e91
 8000a5c:	20004e40 	.word	0x20004e40
 8000a60:	08006728 	.word	0x08006728
 8000a64:	08000f19 	.word	0x08000f19
 8000a68:	20004df8 	.word	0x20004df8
 8000a6c:	0800674c 	.word	0x0800674c
 8000a70:	20004e3c 	.word	0x20004e3c

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b094      	sub	sp, #80	; 0x50
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	2230      	movs	r2, #48	; 0x30
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f005 f9c7 	bl	8005e16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <SystemClock_Config+0xcc>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a27      	ldr	r2, [pc, #156]	; (8000b40 <SystemClock_Config+0xcc>)
 8000aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <SystemClock_Config+0xcc>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <SystemClock_Config+0xd0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <SystemClock_Config+0xd0>)
 8000abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <SystemClock_Config+0xd0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ae8:	23a8      	movs	r3, #168	; 0xa8
 8000aea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af0:	2307      	movs	r3, #7
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 0320 	add.w	r3, r7, #32
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 f84f 	bl	8001b9c <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b04:	f000 fa10 	bl	8000f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b08:	230f      	movs	r3, #15
 8000b0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2105      	movs	r1, #5
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 faa8 	bl	800207c <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b32:	f000 f9f9 	bl	8000f28 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <MX_USART2_UART_Init+0x50>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b80:	f001 fc6e 	bl	8002460 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b8a:	f000 f9cd 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20004dfc 	.word	0x20004dfc
 8000b98:	40004400 	.word	0x40004400

08000b9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_USART3_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bd4:	f001 fc44 	bl	8002460 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f000 f9a3 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200049a4 	.word	0x200049a4
 8000bec:	40004800 	.word	0x40004800

08000bf0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bfa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c10:	2202      	movs	r2, #2
 8000c12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c34:	f000 fe94 	bl	8001960 <HAL_PCD_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c3e:	f000 f973 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200049e4 	.word	0x200049e4

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	4b6c      	ldr	r3, [pc, #432]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a6b      	ldr	r2, [pc, #428]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b69      	ldr	r3, [pc, #420]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	4b65      	ldr	r3, [pc, #404]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a64      	ldr	r2, [pc, #400]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b62      	ldr	r3, [pc, #392]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b5e      	ldr	r3, [pc, #376]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a5d      	ldr	r2, [pc, #372]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b5b      	ldr	r3, [pc, #364]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b57      	ldr	r3, [pc, #348]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a56      	ldr	r2, [pc, #344]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b54      	ldr	r3, [pc, #336]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b50      	ldr	r3, [pc, #320]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a4f      	ldr	r2, [pc, #316]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b4d      	ldr	r3, [pc, #308]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b49      	ldr	r3, [pc, #292]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a48      	ldr	r2, [pc, #288]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b46      	ldr	r3, [pc, #280]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d10:	4842      	ldr	r0, [pc, #264]	; (8000e1c <MX_GPIO_Init+0x1d0>)
 8000d12:	f000 fdf1 	bl	80018f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2140      	movs	r1, #64	; 0x40
 8000d1a:	4841      	ldr	r0, [pc, #260]	; (8000e20 <MX_GPIO_Init+0x1d4>)
 8000d1c:	f000 fdec 	bl	80018f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d26:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <MX_GPIO_Init+0x1d8>)
 8000d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	483c      	ldr	r0, [pc, #240]	; (8000e28 <MX_GPIO_Init+0x1dc>)
 8000d36:	f000 fc35 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d3a:	2332      	movs	r3, #50	; 0x32
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d4a:	230b      	movs	r3, #11
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	4834      	ldr	r0, [pc, #208]	; (8000e28 <MX_GPIO_Init+0x1dc>)
 8000d56:	f000 fc25 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d5a:	2386      	movs	r3, #134	; 0x86
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d6a:	230b      	movs	r3, #11
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	482d      	ldr	r0, [pc, #180]	; (8000e2c <MX_GPIO_Init+0x1e0>)
 8000d76:	f000 fc15 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d7a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4822      	ldr	r0, [pc, #136]	; (8000e1c <MX_GPIO_Init+0x1d0>)
 8000d94:	f000 fc06 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000daa:	230b      	movs	r3, #11
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4819      	ldr	r0, [pc, #100]	; (8000e1c <MX_GPIO_Init+0x1d0>)
 8000db6:	f000 fbf5 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dba:	2340      	movs	r3, #64	; 0x40
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4813      	ldr	r0, [pc, #76]	; (8000e20 <MX_GPIO_Init+0x1d4>)
 8000dd2:	f000 fbe7 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <MX_GPIO_Init+0x1d4>)
 8000dea:	f000 fbdb 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e00:	230b      	movs	r3, #11
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_GPIO_Init+0x1d4>)
 8000e0c:	f000 fbca 	bl	80015a4 <HAL_GPIO_Init>

}
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	; 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40021800 	.word	0x40021800
 8000e24:	10110000 	.word	0x10110000
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020000 	.word	0x40020000

08000e30 <yavuz_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_yavuz_init */
void yavuz_init(void *argument)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e38:	2101      	movs	r1, #1
 8000e3a:	4804      	ldr	r0, [pc, #16]	; (8000e4c <yavuz_init+0x1c>)
 8000e3c:	f000 fd75 	bl	800192a <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000e40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e44:	f002 fb86 	bl	8003554 <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e48:	e7f6      	b.n	8000e38 <yavuz_init+0x8>
 8000e4a:	bf00      	nop
 8000e4c:	40020400 	.word	0x40020400

08000e50 <tarkan_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarkan_init */
void tarkan_init(void *argument)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarkan_init */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	4804      	ldr	r0, [pc, #16]	; (8000e6c <tarkan_init+0x1c>)
 8000e5c:	f000 fd65 	bl	800192a <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000e60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e64:	f002 fb76 	bl	8003554 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e68:	e7f6      	b.n	8000e58 <tarkan_init+0x8>
 8000e6a:	bf00      	nop
 8000e6c:	40020400 	.word	0x40020400

08000e70 <ayberk_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ayberk_init */
void ayberk_init(void *argument)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ayberk_init */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <ayberk_init+0x1c>)
 8000e7e:	f000 fd54 	bl	800192a <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000e82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e86:	f002 fb65 	bl	8003554 <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e8a:	e7f5      	b.n	8000e78 <ayberk_init+0x8>
 8000e8c:	40020400 	.word	0x40020400

08000e90 <ahmet_init>:
* @brief Function implementing the Ahmet thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ahmet_init */
void ahmet_init(void *argument) {
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b09f      	sub	sp, #124	; 0x7c
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ahmet_init */
	/* Infinite loop */
	uint8_t uartString[100];
	float b = 0;
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	677b      	str	r3, [r7, #116]	; 0x74
	int a=0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	673b      	str	r3, [r7, #112]	; 0x70
	for (;;) {
		b += 0.2;
 8000ea2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000ea4:	f7ff fb58 	bl	8000558 <__aeabi_f2d>
 8000ea8:	a319      	add	r3, pc, #100	; (adr r3, 8000f10 <ahmet_init+0x80>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	f7ff f9f5 	bl	800029c <__adddf3>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460c      	mov	r4, r1
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	4621      	mov	r1, r4
 8000eba:	f7ff fba5 	bl	8000608 <__aeabi_d2f>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	677b      	str	r3, [r7, #116]	; 0x74
		a += 1;
 8000ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	673b      	str	r3, [r7, #112]	; 0x70
		memset(uartString, 0, 100);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2264      	movs	r2, #100	; 0x64
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f004 ffa0 	bl	8005e16 <memset>
		sprintf((char *)uartString,"test string %d %d \n\r",a,(int)b);
 8000ed6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8000eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ede:	f107 000c 	add.w	r0, r7, #12
 8000ee2:	ee17 3a90 	vmov	r3, s15
 8000ee6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <ahmet_init+0x78>)
 8000eea:	f004 ff9d 	bl	8005e28 <siprintf>
	//	uart_string_transmit("Test %d %f\n\r", a, b);
		HAL_UART_Transmit(&huart2, uartString, 100, 200);
 8000eee:	f107 010c 	add.w	r1, r7, #12
 8000ef2:	23c8      	movs	r3, #200	; 0xc8
 8000ef4:	2264      	movs	r2, #100	; 0x64
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <ahmet_init+0x7c>)
 8000ef8:	f001 faff 	bl	80024fa <HAL_UART_Transmit>
		osDelay(500);
 8000efc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f00:	f002 fb28 	bl	8003554 <osDelay>
	for (;;) {
 8000f04:	e7cd      	b.n	8000ea2 <ahmet_init+0x12>
 8000f06:	bf00      	nop
 8000f08:	08006668 	.word	0x08006668
 8000f0c:	20004dfc 	.word	0x20004dfc
 8000f10:	9999999a 	.word	0x9999999a
 8000f14:	3fc99999 	.word	0x3fc99999

08000f18 <ferhat_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ferhat_init */
void ferhat_init(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ferhat_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f002 fb17 	bl	8003554 <osDelay>
 8000f26:	e7fb      	b.n	8000f20 <ferhat_init+0x8>

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	; 0x30
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a41      	ldr	r2, [pc, #260]	; (80010ac <HAL_UART_MspInit+0x124>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d14a      	bne.n	8001040 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a3f      	ldr	r2, [pc, #252]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a38      	ldr	r2, [pc, #224]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a31      	ldr	r2, [pc, #196]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ffe:	2308      	movs	r3, #8
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100e:	2307      	movs	r3, #7
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	4826      	ldr	r0, [pc, #152]	; (80010b4 <HAL_UART_MspInit+0x12c>)
 800101a:	f000 fac3 	bl	80015a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800101e:	2320      	movs	r3, #32
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102e:	2307      	movs	r3, #7
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	481f      	ldr	r0, [pc, #124]	; (80010b8 <HAL_UART_MspInit+0x130>)
 800103a:	f000 fab3 	bl	80015a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800103e:	e031      	b.n	80010a4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1d      	ldr	r2, [pc, #116]	; (80010bc <HAL_UART_MspInit+0x134>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d12c      	bne.n	80010a4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8001054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_UART_MspInit+0x128>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_UART_MspInit+0x128>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_UART_MspInit+0x128>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001082:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001094:	2307      	movs	r3, #7
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <HAL_UART_MspInit+0x130>)
 80010a0:	f000 fa80 	bl	80015a4 <HAL_GPIO_Init>
}
 80010a4:	bf00      	nop
 80010a6:	3730      	adds	r7, #48	; 0x30
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40004400 	.word	0x40004400
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020c00 	.word	0x40020c00
 80010bc:	40004800 	.word	0x40004800

080010c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010e0:	d13f      	bne.n	8001162 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <HAL_PCD_MspInit+0xac>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a20      	ldr	r2, [pc, #128]	; (800116c <HAL_PCD_MspInit+0xac>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_PCD_MspInit+0xac>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010fe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001110:	230a      	movs	r3, #10
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4815      	ldr	r0, [pc, #84]	; (8001170 <HAL_PCD_MspInit+0xb0>)
 800111c:	f000 fa42 	bl	80015a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	480e      	ldr	r0, [pc, #56]	; (8001170 <HAL_PCD_MspInit+0xb0>)
 8001136:	f000 fa35 	bl	80015a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_PCD_MspInit+0xac>)
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <HAL_PCD_MspInit+0xac>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	6353      	str	r3, [r2, #52]	; 0x34
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_PCD_MspInit+0xac>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_PCD_MspInit+0xac>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_PCD_MspInit+0xac>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 f8d2 	bl	8001354 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011b0:	f003 fdc2 	bl	8004d38 <xTaskGetSchedulerState>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d001      	beq.n	80011be <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011ba:	f004 fb95 	bl	80058e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f004 fdda 	bl	8005dac <__errno>
 80011f8:	4602      	mov	r2, r0
 80011fa:	230c      	movs	r3, #12
 80011fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20030000 	.word	0x20030000
 8001224:	00000400 	.word	0x00000400
 8001228:	20000090 	.word	0x20000090
 800122c:	20004e90 	.word	0x20004e90

08001230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <SystemInit+0x28>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <SystemInit+0x28>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SystemInit+0x28>)
 8001246:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800124a:	609a      	str	r2, [r3, #8]
#endif
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001260:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001262:	e003      	b.n	800126c <LoopCopyDataInit>

08001264 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001266:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001268:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800126a:	3104      	adds	r1, #4

0800126c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001270:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001272:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001274:	d3f6      	bcc.n	8001264 <CopyDataInit>
  ldr  r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001278:	e002      	b.n	8001280 <LoopFillZerobss>

0800127a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800127a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800127c:	f842 3b04 	str.w	r3, [r2], #4

08001280 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001282:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001284:	d3f9      	bcc.n	800127a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001286:	f7ff ffd3 	bl	8001230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f004 fd95 	bl	8005db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff fb8b 	bl	80009a8 <main>
  bx  lr    
 8001292:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001294:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001298:	080067cc 	.word	0x080067cc
  ldr  r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012a0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80012a4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80012a8:	20004e8c 	.word	0x20004e8c

080012ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_Init+0x40>)
 80012ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_Init+0x40>)
 80012c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_Init+0x40>)
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f92f 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fe28 	bl	8000f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f939 	bl	800158a <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 f90f 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000000 	.word	0x20000000
 800134c:	20000008 	.word	0x20000008
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008
 8001378:	20004e44 	.word	0x20004e44

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20004e44 	.word	0x20004e44

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ffee 	bl	800137c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_Delay+0x40>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffde 	bl	800137c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000008 	.word	0x20000008

080013d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <__NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff47 	bl	80013d8 <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff5c 	bl	8001420 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffb0 	bl	80014f8 <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	e177      	b.n	80018b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c0:	2201      	movs	r2, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	429a      	cmp	r2, r3
 80015da:	f040 8166 	bne.w	80018aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d00b      	beq.n	80015fe <HAL_GPIO_Init+0x5a>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015f2:	2b11      	cmp	r3, #17
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b12      	cmp	r3, #18
 80015fc:	d130      	bne.n	8001660 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2203      	movs	r2, #3
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001634:	2201      	movs	r2, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 0201 	and.w	r2, r3, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	2203      	movs	r2, #3
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0xfc>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b12      	cmp	r3, #18
 800169e:	d123      	bne.n	80016e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	69b9      	ldr	r1, [r7, #24]
 80016e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0203 	and.w	r2, r3, #3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80c0 	beq.w	80018aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b65      	ldr	r3, [pc, #404]	; (80018c4 <HAL_GPIO_Init+0x320>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a64      	ldr	r2, [pc, #400]	; (80018c4 <HAL_GPIO_Init+0x320>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b62      	ldr	r3, [pc, #392]	; (80018c4 <HAL_GPIO_Init+0x320>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001746:	4a60      	ldr	r2, [pc, #384]	; (80018c8 <HAL_GPIO_Init+0x324>)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	220f      	movs	r2, #15
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a57      	ldr	r2, [pc, #348]	; (80018cc <HAL_GPIO_Init+0x328>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d037      	beq.n	80017e2 <HAL_GPIO_Init+0x23e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a56      	ldr	r2, [pc, #344]	; (80018d0 <HAL_GPIO_Init+0x32c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d031      	beq.n	80017de <HAL_GPIO_Init+0x23a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <HAL_GPIO_Init+0x330>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d02b      	beq.n	80017da <HAL_GPIO_Init+0x236>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a54      	ldr	r2, [pc, #336]	; (80018d8 <HAL_GPIO_Init+0x334>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d025      	beq.n	80017d6 <HAL_GPIO_Init+0x232>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a53      	ldr	r2, [pc, #332]	; (80018dc <HAL_GPIO_Init+0x338>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01f      	beq.n	80017d2 <HAL_GPIO_Init+0x22e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_GPIO_Init+0x33c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d019      	beq.n	80017ce <HAL_GPIO_Init+0x22a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <HAL_GPIO_Init+0x340>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_GPIO_Init+0x226>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a50      	ldr	r2, [pc, #320]	; (80018e8 <HAL_GPIO_Init+0x344>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00d      	beq.n	80017c6 <HAL_GPIO_Init+0x222>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4f      	ldr	r2, [pc, #316]	; (80018ec <HAL_GPIO_Init+0x348>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x21e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4e      	ldr	r2, [pc, #312]	; (80018f0 <HAL_GPIO_Init+0x34c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_GPIO_Init+0x21a>
 80017ba:	2309      	movs	r3, #9
 80017bc:	e012      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017be:	230a      	movs	r3, #10
 80017c0:	e010      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017c2:	2308      	movs	r3, #8
 80017c4:	e00e      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e00c      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017ca:	2306      	movs	r3, #6
 80017cc:	e00a      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017ce:	2305      	movs	r3, #5
 80017d0:	e008      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017d2:	2304      	movs	r3, #4
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017d6:	2303      	movs	r3, #3
 80017d8:	e004      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017da:	2302      	movs	r3, #2
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017e2:	2300      	movs	r3, #0
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	f002 0203 	and.w	r2, r2, #3
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	4093      	lsls	r3, r2
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f4:	4934      	ldr	r1, [pc, #208]	; (80018c8 <HAL_GPIO_Init+0x324>)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001802:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <HAL_GPIO_Init+0x350>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001826:	4a33      	ldr	r2, [pc, #204]	; (80018f4 <HAL_GPIO_Init+0x350>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800182c:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <HAL_GPIO_Init+0x350>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001850:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <HAL_GPIO_Init+0x350>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001856:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_GPIO_Init+0x350>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187a:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <HAL_GPIO_Init+0x350>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_GPIO_Init+0x350>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a4:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <HAL_GPIO_Init+0x350>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3301      	adds	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b0f      	cmp	r3, #15
 80018b4:	f67f ae84 	bls.w	80015c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b8:	bf00      	nop
 80018ba:	3724      	adds	r7, #36	; 0x24
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40013800 	.word	0x40013800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40021400 	.word	0x40021400
 80018e4:	40021800 	.word	0x40021800
 80018e8:	40021c00 	.word	0x40021c00
 80018ec:	40022000 	.word	0x40022000
 80018f0:	40022400 	.word	0x40022400
 80018f4:	40013c00 	.word	0x40013c00

080018f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
 8001904:	4613      	mov	r3, r2
 8001906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001908:	787b      	ldrb	r3, [r7, #1]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001914:	e003      	b.n	800191e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	041a      	lsls	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	619a      	str	r2, [r3, #24]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	401a      	ands	r2, r3
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	429a      	cmp	r2, r3
 8001942:	d104      	bne.n	800194e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	041a      	lsls	r2, r3, #16
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800194c:	e002      	b.n	8001954 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	b08f      	sub	sp, #60	; 0x3c
 8001964:	af0a      	add	r7, sp, #40	; 0x28
 8001966:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e10f      	b.n	8001b92 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d106      	bne.n	8001992 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff fb97 	bl	80010c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2203      	movs	r2, #3
 8001996:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f001 fa62 	bl	8002e7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	687e      	ldr	r6, [r7, #4]
 80019be:	466d      	mov	r5, sp
 80019c0:	f106 0410 	add.w	r4, r6, #16
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80019d4:	1d33      	adds	r3, r6, #4
 80019d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d8:	6838      	ldr	r0, [r7, #0]
 80019da:	f001 f9ed 	bl	8002db8 <USB_CoreInit>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0d0      	b.n	8001b92 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 fa50 	bl	8002e9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e04a      	b.n	8001a98 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	333d      	adds	r3, #61	; 0x3d
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	333c      	adds	r3, #60	; 0x3c
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	b298      	uxth	r0, r3
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3342      	adds	r3, #66	; 0x42
 8001a3e:	4602      	mov	r2, r0
 8001a40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	333f      	adds	r3, #63	; 0x3f
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	3344      	adds	r3, #68	; 0x44
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	3348      	adds	r3, #72	; 0x48
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3350      	adds	r3, #80	; 0x50
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	3301      	adds	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d3af      	bcc.n	8001a02 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	e044      	b.n	8001b32 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d3b5      	bcc.n	8001aa8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	687e      	ldr	r6, [r7, #4]
 8001b44:	466d      	mov	r5, sp
 8001b46:	f106 0410 	add.w	r4, r6, #16
 8001b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b5a:	1d33      	adds	r3, r6, #4
 8001b5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b5e:	6838      	ldr	r0, [r7, #0]
 8001b60:	f001 f9c6 	bl	8002ef0 <USB_DevInit>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00d      	b.n	8001b92 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fb75 	bl	800327a <USB_DevDisconnect>

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e25b      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d075      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bba:	4ba3      	ldr	r3, [pc, #652]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d00c      	beq.n	8001be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc6:	4ba0      	ldr	r3, [pc, #640]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d112      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd2:	4b9d      	ldr	r3, [pc, #628]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bde:	d10b      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	4b99      	ldr	r3, [pc, #612]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d05b      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x108>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d157      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e236      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d106      	bne.n	8001c10 <HAL_RCC_OscConfig+0x74>
 8001c02:	4b91      	ldr	r3, [pc, #580]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a90      	ldr	r2, [pc, #576]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e01d      	b.n	8001c4c <HAL_RCC_OscConfig+0xb0>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b8b      	ldr	r3, [pc, #556]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a8a      	ldr	r2, [pc, #552]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a87      	ldr	r2, [pc, #540]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_OscConfig+0xb0>
 8001c34:	4b84      	ldr	r3, [pc, #528]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a83      	ldr	r2, [pc, #524]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a80      	ldr	r2, [pc, #512]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d013      	beq.n	8001c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fb92 	bl	800137c <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fb8e 	bl	800137c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e1fb      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0xc0>
 8001c7a:	e014      	b.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fb7e 	bl	800137c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fb7a 	bl	800137c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1e7      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	4b6c      	ldr	r3, [pc, #432]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0xe8>
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d063      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cb2:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cbe:	4b62      	ldr	r3, [pc, #392]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d11c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d116      	bne.n	8001d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	4b5c      	ldr	r3, [pc, #368]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_RCC_OscConfig+0x152>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e1bb      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cee:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4952      	ldr	r1, [pc, #328]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	e03a      	b.n	8001d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0c:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <HAL_RCC_OscConfig+0x2b0>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff fb33 	bl	800137c <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fb2f 	bl	800137c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e19c      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d38:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4940      	ldr	r1, [pc, #256]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	600b      	str	r3, [r1, #0]
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_RCC_OscConfig+0x2b0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fb12 	bl	800137c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fb0e 	bl	800137c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e17b      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d030      	beq.n	8001de8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d016      	beq.n	8001dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8e:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_RCC_OscConfig+0x2b4>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff faf2 	bl	800137c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff faee 	bl	800137c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e15b      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x200>
 8001dba:	e015      	b.n	8001de8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_RCC_OscConfig+0x2b4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fadb 	bl	800137c <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dca:	f7ff fad7 	bl	800137c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e144      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a0 	beq.w	8001f36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10f      	bne.n	8001e26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e22:	2301      	movs	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_OscConfig+0x2b8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d121      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_RCC_OscConfig+0x2b8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_RCC_OscConfig+0x2b8>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fa9d 	bl	800137c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	e011      	b.n	8001e6a <HAL_RCC_OscConfig+0x2ce>
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	42470000 	.word	0x42470000
 8001e50:	42470e80 	.word	0x42470e80
 8001e54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e58:	f7ff fa90 	bl	800137c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0fd      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	4b81      	ldr	r3, [pc, #516]	; (8002070 <HAL_RCC_OscConfig+0x4d4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d106      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
 8001e7e:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	4a7c      	ldr	r2, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8a:	e01c      	b.n	8001ec6 <HAL_RCC_OscConfig+0x32a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d10c      	bne.n	8001eae <HAL_RCC_OscConfig+0x312>
 8001e94:	4b77      	ldr	r3, [pc, #476]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a76      	ldr	r2, [pc, #472]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea0:	4b74      	ldr	r3, [pc, #464]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	4a73      	ldr	r2, [pc, #460]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001eac:	e00b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x32a>
 8001eae:	4b71      	ldr	r3, [pc, #452]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	4a70      	ldr	r2, [pc, #448]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eba:	4b6e      	ldr	r3, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebe:	4a6d      	ldr	r2, [pc, #436]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d015      	beq.n	8001efa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ece:	f7ff fa55 	bl	800137c <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff fa51 	bl	800137c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e0bc      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	4b61      	ldr	r3, [pc, #388]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ee      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x33a>
 8001ef8:	e014      	b.n	8001f24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7ff fa3f 	bl	800137c <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff fa3b 	bl	800137c <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e0a6      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f18:	4b56      	ldr	r3, [pc, #344]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ee      	bne.n	8001f02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d105      	bne.n	8001f36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4b52      	ldr	r3, [pc, #328]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a51      	ldr	r2, [pc, #324]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8092 	beq.w	8002064 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f40:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d05c      	beq.n	8002006 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d141      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f54:	4b48      	ldr	r3, [pc, #288]	; (8002078 <HAL_RCC_OscConfig+0x4dc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fa0f 	bl	800137c <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff fa0b 	bl	800137c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e078      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f74:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69da      	ldr	r2, [r3, #28]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	019b      	lsls	r3, r3, #6
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	085b      	lsrs	r3, r3, #1
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	041b      	lsls	r3, r3, #16
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	061b      	lsls	r3, r3, #24
 8001fa4:	4933      	ldr	r1, [pc, #204]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001faa:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_RCC_OscConfig+0x4dc>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f9e4 	bl	800137c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f9e0 	bl	800137c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e04d      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
 8001fd6:	e045      	b.n	8002064 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x4dc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7ff f9cd 	bl	800137c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff f9c9 	bl	800137c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e036      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x44a>
 8002004:	e02e      	b.n	8002064 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e029      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	429a      	cmp	r2, r3
 8002024:	d11c      	bne.n	8002060 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d115      	bne.n	8002060 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800203a:	4013      	ands	r3, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002040:	4293      	cmp	r3, r2
 8002042:	d10d      	bne.n	8002060 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d106      	bne.n	8002060 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40007000 	.word	0x40007000
 8002074:	40023800 	.word	0x40023800
 8002078:	42470060 	.word	0x42470060

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0cc      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b68      	ldr	r3, [pc, #416]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d90c      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b65      	ldr	r3, [pc, #404]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b63      	ldr	r3, [pc, #396]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0b8      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b59      	ldr	r3, [pc, #356]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a58      	ldr	r2, [pc, #352]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a52      	ldr	r2, [pc, #328]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	494d      	ldr	r1, [pc, #308]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d044      	beq.n	800219c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d119      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e07f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d003      	beq.n	800213a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002136:	2b03      	cmp	r3, #3
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e06f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e067      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f023 0203 	bic.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4934      	ldr	r1, [pc, #208]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216c:	f7ff f906 	bl	800137c <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	e00a      	b.n	800218a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002174:	f7ff f902 	bl	800137c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e04f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 020c 	and.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	429a      	cmp	r2, r3
 800219a:	d1eb      	bne.n	8002174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d20c      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b22      	ldr	r3, [pc, #136]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e032      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4916      	ldr	r1, [pc, #88]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	490e      	ldr	r1, [pc, #56]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002202:	f000 f821 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 8002206:	4601      	mov	r1, r0
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	fa21 f303 	lsr.w	r3, r1, r3
 800221a:	4a09      	ldr	r2, [pc, #36]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f866 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023c00 	.word	0x40023c00
 8002238:	40023800 	.word	0x40023800
 800223c:	08006770 	.word	0x08006770
 8002240:	20000000 	.word	0x20000000
 8002244:	20000004 	.word	0x20000004

08002248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	2300      	movs	r3, #0
 8002258:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800225e:	4b63      	ldr	r3, [pc, #396]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b04      	cmp	r3, #4
 8002268:	d007      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x32>
 800226a:	2b08      	cmp	r3, #8
 800226c:	d008      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x38>
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 80b4 	bne.w	80023dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b5e      	ldr	r3, [pc, #376]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002276:	60bb      	str	r3, [r7, #8]
       break;
 8002278:	e0b3      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800227a:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800227c:	60bb      	str	r3, [r7, #8]
      break;
 800227e:	e0b0      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002280:	4b5a      	ldr	r3, [pc, #360]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002288:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800228a:	4b58      	ldr	r3, [pc, #352]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d04a      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002296:	4b55      	ldr	r3, [pc, #340]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	f04f 0400 	mov.w	r4, #0
 80022a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	ea03 0501 	and.w	r5, r3, r1
 80022ac:	ea04 0602 	and.w	r6, r4, r2
 80022b0:	4629      	mov	r1, r5
 80022b2:	4632      	mov	r2, r6
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	f04f 0400 	mov.w	r4, #0
 80022bc:	0154      	lsls	r4, r2, #5
 80022be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022c2:	014b      	lsls	r3, r1, #5
 80022c4:	4619      	mov	r1, r3
 80022c6:	4622      	mov	r2, r4
 80022c8:	1b49      	subs	r1, r1, r5
 80022ca:	eb62 0206 	sbc.w	r2, r2, r6
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	f04f 0400 	mov.w	r4, #0
 80022d6:	0194      	lsls	r4, r2, #6
 80022d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022dc:	018b      	lsls	r3, r1, #6
 80022de:	1a5b      	subs	r3, r3, r1
 80022e0:	eb64 0402 	sbc.w	r4, r4, r2
 80022e4:	f04f 0100 	mov.w	r1, #0
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	00e2      	lsls	r2, r4, #3
 80022ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022f2:	00d9      	lsls	r1, r3, #3
 80022f4:	460b      	mov	r3, r1
 80022f6:	4614      	mov	r4, r2
 80022f8:	195b      	adds	r3, r3, r5
 80022fa:	eb44 0406 	adc.w	r4, r4, r6
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	0262      	lsls	r2, r4, #9
 8002308:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800230c:	0259      	lsls	r1, r3, #9
 800230e:	460b      	mov	r3, r1
 8002310:	4614      	mov	r4, r2
 8002312:	4618      	mov	r0, r3
 8002314:	4621      	mov	r1, r4
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f04f 0400 	mov.w	r4, #0
 800231c:	461a      	mov	r2, r3
 800231e:	4623      	mov	r3, r4
 8002320:	f7fe f9c2 	bl	80006a8 <__aeabi_uldivmod>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e049      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232c:	4b2f      	ldr	r3, [pc, #188]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	099b      	lsrs	r3, r3, #6
 8002332:	f04f 0400 	mov.w	r4, #0
 8002336:	f240 11ff 	movw	r1, #511	; 0x1ff
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	ea03 0501 	and.w	r5, r3, r1
 8002342:	ea04 0602 	and.w	r6, r4, r2
 8002346:	4629      	mov	r1, r5
 8002348:	4632      	mov	r2, r6
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	f04f 0400 	mov.w	r4, #0
 8002352:	0154      	lsls	r4, r2, #5
 8002354:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002358:	014b      	lsls	r3, r1, #5
 800235a:	4619      	mov	r1, r3
 800235c:	4622      	mov	r2, r4
 800235e:	1b49      	subs	r1, r1, r5
 8002360:	eb62 0206 	sbc.w	r2, r2, r6
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	f04f 0400 	mov.w	r4, #0
 800236c:	0194      	lsls	r4, r2, #6
 800236e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002372:	018b      	lsls	r3, r1, #6
 8002374:	1a5b      	subs	r3, r3, r1
 8002376:	eb64 0402 	sbc.w	r4, r4, r2
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	00e2      	lsls	r2, r4, #3
 8002384:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002388:	00d9      	lsls	r1, r3, #3
 800238a:	460b      	mov	r3, r1
 800238c:	4614      	mov	r4, r2
 800238e:	195b      	adds	r3, r3, r5
 8002390:	eb44 0406 	adc.w	r4, r4, r6
 8002394:	f04f 0100 	mov.w	r1, #0
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	02a2      	lsls	r2, r4, #10
 800239e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023a2:	0299      	lsls	r1, r3, #10
 80023a4:	460b      	mov	r3, r1
 80023a6:	4614      	mov	r4, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	4621      	mov	r1, r4
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f04f 0400 	mov.w	r4, #0
 80023b2:	461a      	mov	r2, r3
 80023b4:	4623      	mov	r3, r4
 80023b6:	f7fe f977 	bl	80006a8 <__aeabi_uldivmod>
 80023ba:	4603      	mov	r3, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	3301      	adds	r3, #1
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	60bb      	str	r3, [r7, #8]
      break;
 80023da:	e002      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023de:	60bb      	str	r3, [r7, #8]
      break;
 80023e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e2:	68bb      	ldr	r3, [r7, #8]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	007a1200 	.word	0x007a1200

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_RCC_GetHCLKFreq+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000000 	.word	0x20000000

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002414:	f7ff fff0 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002418:	4601      	mov	r1, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4a03      	ldr	r2, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	fa21 f303 	lsr.w	r3, r1, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	08006780 	.word	0x08006780

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800243c:	f7ff ffdc 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002440:	4601      	mov	r1, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0b5b      	lsrs	r3, r3, #13
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4a03      	ldr	r2, [pc, #12]	; (800245c <HAL_RCC_GetPCLK2Freq+0x24>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	08006780 	.word	0x08006780

08002460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e03f      	b.n	80024f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe fd7e 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2224      	movs	r2, #36	; 0x24
 8002490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f90b 	bl	80026c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b088      	sub	sp, #32
 80024fe:	af02      	add	r7, sp, #8
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	603b      	str	r3, [r7, #0]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b20      	cmp	r3, #32
 8002518:	f040 8083 	bne.w	8002622 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_UART_Transmit+0x2e>
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e07b      	b.n	8002624 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_UART_Transmit+0x40>
 8002536:	2302      	movs	r3, #2
 8002538:	e074      	b.n	8002624 <HAL_UART_Transmit+0x12a>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2221      	movs	r2, #33	; 0x21
 800254c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002550:	f7fe ff14 	bl	800137c <HAL_GetTick>
 8002554:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	88fa      	ldrh	r2, [r7, #6]
 800255a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	88fa      	ldrh	r2, [r7, #6]
 8002560:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800256a:	e042      	b.n	80025f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002582:	d122      	bne.n	80025ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2200      	movs	r2, #0
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f84c 	bl	800262c <UART_WaitOnFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e042      	b.n	8002624 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d103      	bne.n	80025c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	3302      	adds	r3, #2
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	e017      	b.n	80025f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3301      	adds	r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	e013      	b.n	80025f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2200      	movs	r2, #0
 80025d2:	2180      	movs	r1, #128	; 0x80
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f829 	bl	800262c <UART_WaitOnFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e01f      	b.n	8002624 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	60ba      	str	r2, [r7, #8]
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1b7      	bne.n	800256c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2200      	movs	r2, #0
 8002604:	2140      	movs	r1, #64	; 0x40
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f810 	bl	800262c <UART_WaitOnFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e006      	b.n	8002624 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e000      	b.n	8002624 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002622:	2302      	movs	r3, #2
  }
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	4613      	mov	r3, r2
 800263a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800263c:	e02c      	b.n	8002698 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d028      	beq.n	8002698 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <UART_WaitOnFlagUntilTimeout+0x30>
 800264c:	f7fe fe96 	bl	800137c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	429a      	cmp	r2, r3
 800265a:	d21d      	bcs.n	8002698 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800266a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e00f      	b.n	80026b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	4013      	ands	r3, r2
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d0c3      	beq.n	800263e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002702:	f023 030c 	bic.w	r3, r3, #12
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	68f9      	ldr	r1, [r7, #12]
 800270c:	430b      	orrs	r3, r1
 800270e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800272e:	f040 818b 	bne.w	8002a48 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4ac1      	ldr	r2, [pc, #772]	; (8002a3c <UART_SetConfig+0x37c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d005      	beq.n	8002748 <UART_SetConfig+0x88>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4abf      	ldr	r2, [pc, #764]	; (8002a40 <UART_SetConfig+0x380>)
 8002742:	4293      	cmp	r3, r2
 8002744:	f040 80bd 	bne.w	80028c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002748:	f7ff fe76 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 800274c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	461d      	mov	r5, r3
 8002752:	f04f 0600 	mov.w	r6, #0
 8002756:	46a8      	mov	r8, r5
 8002758:	46b1      	mov	r9, r6
 800275a:	eb18 0308 	adds.w	r3, r8, r8
 800275e:	eb49 0409 	adc.w	r4, r9, r9
 8002762:	4698      	mov	r8, r3
 8002764:	46a1      	mov	r9, r4
 8002766:	eb18 0805 	adds.w	r8, r8, r5
 800276a:	eb49 0906 	adc.w	r9, r9, r6
 800276e:	f04f 0100 	mov.w	r1, #0
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800277a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800277e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002782:	4688      	mov	r8, r1
 8002784:	4691      	mov	r9, r2
 8002786:	eb18 0005 	adds.w	r0, r8, r5
 800278a:	eb49 0106 	adc.w	r1, r9, r6
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	461d      	mov	r5, r3
 8002794:	f04f 0600 	mov.w	r6, #0
 8002798:	196b      	adds	r3, r5, r5
 800279a:	eb46 0406 	adc.w	r4, r6, r6
 800279e:	461a      	mov	r2, r3
 80027a0:	4623      	mov	r3, r4
 80027a2:	f7fd ff81 	bl	80006a8 <__aeabi_uldivmod>
 80027a6:	4603      	mov	r3, r0
 80027a8:	460c      	mov	r4, r1
 80027aa:	461a      	mov	r2, r3
 80027ac:	4ba5      	ldr	r3, [pc, #660]	; (8002a44 <UART_SetConfig+0x384>)
 80027ae:	fba3 2302 	umull	r2, r3, r3, r2
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	461d      	mov	r5, r3
 80027bc:	f04f 0600 	mov.w	r6, #0
 80027c0:	46a9      	mov	r9, r5
 80027c2:	46b2      	mov	sl, r6
 80027c4:	eb19 0309 	adds.w	r3, r9, r9
 80027c8:	eb4a 040a 	adc.w	r4, sl, sl
 80027cc:	4699      	mov	r9, r3
 80027ce:	46a2      	mov	sl, r4
 80027d0:	eb19 0905 	adds.w	r9, r9, r5
 80027d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80027d8:	f04f 0100 	mov.w	r1, #0
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027ec:	4689      	mov	r9, r1
 80027ee:	4692      	mov	sl, r2
 80027f0:	eb19 0005 	adds.w	r0, r9, r5
 80027f4:	eb4a 0106 	adc.w	r1, sl, r6
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	461d      	mov	r5, r3
 80027fe:	f04f 0600 	mov.w	r6, #0
 8002802:	196b      	adds	r3, r5, r5
 8002804:	eb46 0406 	adc.w	r4, r6, r6
 8002808:	461a      	mov	r2, r3
 800280a:	4623      	mov	r3, r4
 800280c:	f7fd ff4c 	bl	80006a8 <__aeabi_uldivmod>
 8002810:	4603      	mov	r3, r0
 8002812:	460c      	mov	r4, r1
 8002814:	461a      	mov	r2, r3
 8002816:	4b8b      	ldr	r3, [pc, #556]	; (8002a44 <UART_SetConfig+0x384>)
 8002818:	fba3 1302 	umull	r1, r3, r3, r2
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	2164      	movs	r1, #100	; 0x64
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	3332      	adds	r3, #50	; 0x32
 800282a:	4a86      	ldr	r2, [pc, #536]	; (8002a44 <UART_SetConfig+0x384>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	095b      	lsrs	r3, r3, #5
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002838:	4498      	add	r8, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	461d      	mov	r5, r3
 800283e:	f04f 0600 	mov.w	r6, #0
 8002842:	46a9      	mov	r9, r5
 8002844:	46b2      	mov	sl, r6
 8002846:	eb19 0309 	adds.w	r3, r9, r9
 800284a:	eb4a 040a 	adc.w	r4, sl, sl
 800284e:	4699      	mov	r9, r3
 8002850:	46a2      	mov	sl, r4
 8002852:	eb19 0905 	adds.w	r9, r9, r5
 8002856:	eb4a 0a06 	adc.w	sl, sl, r6
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002866:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800286a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800286e:	4689      	mov	r9, r1
 8002870:	4692      	mov	sl, r2
 8002872:	eb19 0005 	adds.w	r0, r9, r5
 8002876:	eb4a 0106 	adc.w	r1, sl, r6
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	461d      	mov	r5, r3
 8002880:	f04f 0600 	mov.w	r6, #0
 8002884:	196b      	adds	r3, r5, r5
 8002886:	eb46 0406 	adc.w	r4, r6, r6
 800288a:	461a      	mov	r2, r3
 800288c:	4623      	mov	r3, r4
 800288e:	f7fd ff0b 	bl	80006a8 <__aeabi_uldivmod>
 8002892:	4603      	mov	r3, r0
 8002894:	460c      	mov	r4, r1
 8002896:	461a      	mov	r2, r3
 8002898:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <UART_SetConfig+0x384>)
 800289a:	fba3 1302 	umull	r1, r3, r3, r2
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2164      	movs	r1, #100	; 0x64
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	3332      	adds	r3, #50	; 0x32
 80028ac:	4a65      	ldr	r2, [pc, #404]	; (8002a44 <UART_SetConfig+0x384>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	f003 0207 	and.w	r2, r3, #7
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4442      	add	r2, r8
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	e26f      	b.n	8002da2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028c2:	f7ff fda5 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 80028c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	461d      	mov	r5, r3
 80028cc:	f04f 0600 	mov.w	r6, #0
 80028d0:	46a8      	mov	r8, r5
 80028d2:	46b1      	mov	r9, r6
 80028d4:	eb18 0308 	adds.w	r3, r8, r8
 80028d8:	eb49 0409 	adc.w	r4, r9, r9
 80028dc:	4698      	mov	r8, r3
 80028de:	46a1      	mov	r9, r4
 80028e0:	eb18 0805 	adds.w	r8, r8, r5
 80028e4:	eb49 0906 	adc.w	r9, r9, r6
 80028e8:	f04f 0100 	mov.w	r1, #0
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028fc:	4688      	mov	r8, r1
 80028fe:	4691      	mov	r9, r2
 8002900:	eb18 0005 	adds.w	r0, r8, r5
 8002904:	eb49 0106 	adc.w	r1, r9, r6
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	461d      	mov	r5, r3
 800290e:	f04f 0600 	mov.w	r6, #0
 8002912:	196b      	adds	r3, r5, r5
 8002914:	eb46 0406 	adc.w	r4, r6, r6
 8002918:	461a      	mov	r2, r3
 800291a:	4623      	mov	r3, r4
 800291c:	f7fd fec4 	bl	80006a8 <__aeabi_uldivmod>
 8002920:	4603      	mov	r3, r0
 8002922:	460c      	mov	r4, r1
 8002924:	461a      	mov	r2, r3
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <UART_SetConfig+0x384>)
 8002928:	fba3 2302 	umull	r2, r3, r3, r2
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	461d      	mov	r5, r3
 8002936:	f04f 0600 	mov.w	r6, #0
 800293a:	46a9      	mov	r9, r5
 800293c:	46b2      	mov	sl, r6
 800293e:	eb19 0309 	adds.w	r3, r9, r9
 8002942:	eb4a 040a 	adc.w	r4, sl, sl
 8002946:	4699      	mov	r9, r3
 8002948:	46a2      	mov	sl, r4
 800294a:	eb19 0905 	adds.w	r9, r9, r5
 800294e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800295e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002962:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002966:	4689      	mov	r9, r1
 8002968:	4692      	mov	sl, r2
 800296a:	eb19 0005 	adds.w	r0, r9, r5
 800296e:	eb4a 0106 	adc.w	r1, sl, r6
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	461d      	mov	r5, r3
 8002978:	f04f 0600 	mov.w	r6, #0
 800297c:	196b      	adds	r3, r5, r5
 800297e:	eb46 0406 	adc.w	r4, r6, r6
 8002982:	461a      	mov	r2, r3
 8002984:	4623      	mov	r3, r4
 8002986:	f7fd fe8f 	bl	80006a8 <__aeabi_uldivmod>
 800298a:	4603      	mov	r3, r0
 800298c:	460c      	mov	r4, r1
 800298e:	461a      	mov	r2, r3
 8002990:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <UART_SetConfig+0x384>)
 8002992:	fba3 1302 	umull	r1, r3, r3, r2
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2164      	movs	r1, #100	; 0x64
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	3332      	adds	r3, #50	; 0x32
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <UART_SetConfig+0x384>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029b2:	4498      	add	r8, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	461d      	mov	r5, r3
 80029b8:	f04f 0600 	mov.w	r6, #0
 80029bc:	46a9      	mov	r9, r5
 80029be:	46b2      	mov	sl, r6
 80029c0:	eb19 0309 	adds.w	r3, r9, r9
 80029c4:	eb4a 040a 	adc.w	r4, sl, sl
 80029c8:	4699      	mov	r9, r3
 80029ca:	46a2      	mov	sl, r4
 80029cc:	eb19 0905 	adds.w	r9, r9, r5
 80029d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029e8:	4689      	mov	r9, r1
 80029ea:	4692      	mov	sl, r2
 80029ec:	eb19 0005 	adds.w	r0, r9, r5
 80029f0:	eb4a 0106 	adc.w	r1, sl, r6
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	461d      	mov	r5, r3
 80029fa:	f04f 0600 	mov.w	r6, #0
 80029fe:	196b      	adds	r3, r5, r5
 8002a00:	eb46 0406 	adc.w	r4, r6, r6
 8002a04:	461a      	mov	r2, r3
 8002a06:	4623      	mov	r3, r4
 8002a08:	f7fd fe4e 	bl	80006a8 <__aeabi_uldivmod>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	460c      	mov	r4, r1
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <UART_SetConfig+0x384>)
 8002a14:	fba3 1302 	umull	r1, r3, r3, r2
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	2164      	movs	r1, #100	; 0x64
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	3332      	adds	r3, #50	; 0x32
 8002a26:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <UART_SetConfig+0x384>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	f003 0207 	and.w	r2, r3, #7
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4442      	add	r2, r8
 8002a38:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002a3a:	e1b2      	b.n	8002da2 <UART_SetConfig+0x6e2>
 8002a3c:	40011000 	.word	0x40011000
 8002a40:	40011400 	.word	0x40011400
 8002a44:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4ad7      	ldr	r2, [pc, #860]	; (8002dac <UART_SetConfig+0x6ec>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d005      	beq.n	8002a5e <UART_SetConfig+0x39e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4ad6      	ldr	r2, [pc, #856]	; (8002db0 <UART_SetConfig+0x6f0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	f040 80d1 	bne.w	8002c00 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a5e:	f7ff fceb 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002a62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	469a      	mov	sl, r3
 8002a68:	f04f 0b00 	mov.w	fp, #0
 8002a6c:	46d0      	mov	r8, sl
 8002a6e:	46d9      	mov	r9, fp
 8002a70:	eb18 0308 	adds.w	r3, r8, r8
 8002a74:	eb49 0409 	adc.w	r4, r9, r9
 8002a78:	4698      	mov	r8, r3
 8002a7a:	46a1      	mov	r9, r4
 8002a7c:	eb18 080a 	adds.w	r8, r8, sl
 8002a80:	eb49 090b 	adc.w	r9, r9, fp
 8002a84:	f04f 0100 	mov.w	r1, #0
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a98:	4688      	mov	r8, r1
 8002a9a:	4691      	mov	r9, r2
 8002a9c:	eb1a 0508 	adds.w	r5, sl, r8
 8002aa0:	eb4b 0609 	adc.w	r6, fp, r9
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	f04f 0400 	mov.w	r4, #0
 8002ab6:	0094      	lsls	r4, r2, #2
 8002ab8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002abc:	008b      	lsls	r3, r1, #2
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4623      	mov	r3, r4
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	4631      	mov	r1, r6
 8002ac6:	f7fd fdef 	bl	80006a8 <__aeabi_uldivmod>
 8002aca:	4603      	mov	r3, r0
 8002acc:	460c      	mov	r4, r1
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4bb8      	ldr	r3, [pc, #736]	; (8002db4 <UART_SetConfig+0x6f4>)
 8002ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	469b      	mov	fp, r3
 8002ae0:	f04f 0c00 	mov.w	ip, #0
 8002ae4:	46d9      	mov	r9, fp
 8002ae6:	46e2      	mov	sl, ip
 8002ae8:	eb19 0309 	adds.w	r3, r9, r9
 8002aec:	eb4a 040a 	adc.w	r4, sl, sl
 8002af0:	4699      	mov	r9, r3
 8002af2:	46a2      	mov	sl, r4
 8002af4:	eb19 090b 	adds.w	r9, r9, fp
 8002af8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002afc:	f04f 0100 	mov.w	r1, #0
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b10:	4689      	mov	r9, r1
 8002b12:	4692      	mov	sl, r2
 8002b14:	eb1b 0509 	adds.w	r5, fp, r9
 8002b18:	eb4c 060a 	adc.w	r6, ip, sl
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4619      	mov	r1, r3
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	f04f 0400 	mov.w	r4, #0
 8002b2e:	0094      	lsls	r4, r2, #2
 8002b30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b34:	008b      	lsls	r3, r1, #2
 8002b36:	461a      	mov	r2, r3
 8002b38:	4623      	mov	r3, r4
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	4631      	mov	r1, r6
 8002b3e:	f7fd fdb3 	bl	80006a8 <__aeabi_uldivmod>
 8002b42:	4603      	mov	r3, r0
 8002b44:	460c      	mov	r4, r1
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b9a      	ldr	r3, [pc, #616]	; (8002db4 <UART_SetConfig+0x6f4>)
 8002b4a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2164      	movs	r1, #100	; 0x64
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	3332      	adds	r3, #50	; 0x32
 8002b5c:	4a95      	ldr	r2, [pc, #596]	; (8002db4 <UART_SetConfig+0x6f4>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b68:	4498      	add	r8, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	469b      	mov	fp, r3
 8002b6e:	f04f 0c00 	mov.w	ip, #0
 8002b72:	46d9      	mov	r9, fp
 8002b74:	46e2      	mov	sl, ip
 8002b76:	eb19 0309 	adds.w	r3, r9, r9
 8002b7a:	eb4a 040a 	adc.w	r4, sl, sl
 8002b7e:	4699      	mov	r9, r3
 8002b80:	46a2      	mov	sl, r4
 8002b82:	eb19 090b 	adds.w	r9, r9, fp
 8002b86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b9e:	4689      	mov	r9, r1
 8002ba0:	4692      	mov	sl, r2
 8002ba2:	eb1b 0509 	adds.w	r5, fp, r9
 8002ba6:	eb4c 060a 	adc.w	r6, ip, sl
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	f04f 0400 	mov.w	r4, #0
 8002bbc:	0094      	lsls	r4, r2, #2
 8002bbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bc2:	008b      	lsls	r3, r1, #2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4623      	mov	r3, r4
 8002bc8:	4628      	mov	r0, r5
 8002bca:	4631      	mov	r1, r6
 8002bcc:	f7fd fd6c 	bl	80006a8 <__aeabi_uldivmod>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	460c      	mov	r4, r1
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b77      	ldr	r3, [pc, #476]	; (8002db4 <UART_SetConfig+0x6f4>)
 8002bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	2164      	movs	r1, #100	; 0x64
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	3332      	adds	r3, #50	; 0x32
 8002bea:	4a72      	ldr	r2, [pc, #456]	; (8002db4 <UART_SetConfig+0x6f4>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	f003 020f 	and.w	r2, r3, #15
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4442      	add	r2, r8
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	e0d0      	b.n	8002da2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c00:	f7ff fc06 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8002c04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	469a      	mov	sl, r3
 8002c0a:	f04f 0b00 	mov.w	fp, #0
 8002c0e:	46d0      	mov	r8, sl
 8002c10:	46d9      	mov	r9, fp
 8002c12:	eb18 0308 	adds.w	r3, r8, r8
 8002c16:	eb49 0409 	adc.w	r4, r9, r9
 8002c1a:	4698      	mov	r8, r3
 8002c1c:	46a1      	mov	r9, r4
 8002c1e:	eb18 080a 	adds.w	r8, r8, sl
 8002c22:	eb49 090b 	adc.w	r9, r9, fp
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c3a:	4688      	mov	r8, r1
 8002c3c:	4691      	mov	r9, r2
 8002c3e:	eb1a 0508 	adds.w	r5, sl, r8
 8002c42:	eb4b 0609 	adc.w	r6, fp, r9
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	f04f 0400 	mov.w	r4, #0
 8002c58:	0094      	lsls	r4, r2, #2
 8002c5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c5e:	008b      	lsls	r3, r1, #2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4623      	mov	r3, r4
 8002c64:	4628      	mov	r0, r5
 8002c66:	4631      	mov	r1, r6
 8002c68:	f7fd fd1e 	bl	80006a8 <__aeabi_uldivmod>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	460c      	mov	r4, r1
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b50      	ldr	r3, [pc, #320]	; (8002db4 <UART_SetConfig+0x6f4>)
 8002c74:	fba3 2302 	umull	r2, r3, r3, r2
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	469b      	mov	fp, r3
 8002c82:	f04f 0c00 	mov.w	ip, #0
 8002c86:	46d9      	mov	r9, fp
 8002c88:	46e2      	mov	sl, ip
 8002c8a:	eb19 0309 	adds.w	r3, r9, r9
 8002c8e:	eb4a 040a 	adc.w	r4, sl, sl
 8002c92:	4699      	mov	r9, r3
 8002c94:	46a2      	mov	sl, r4
 8002c96:	eb19 090b 	adds.w	r9, r9, fp
 8002c9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c9e:	f04f 0100 	mov.w	r1, #0
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002caa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cb2:	4689      	mov	r9, r1
 8002cb4:	4692      	mov	sl, r2
 8002cb6:	eb1b 0509 	adds.w	r5, fp, r9
 8002cba:	eb4c 060a 	adc.w	r6, ip, sl
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	f04f 0400 	mov.w	r4, #0
 8002cd0:	0094      	lsls	r4, r2, #2
 8002cd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cd6:	008b      	lsls	r3, r1, #2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4623      	mov	r3, r4
 8002cdc:	4628      	mov	r0, r5
 8002cde:	4631      	mov	r1, r6
 8002ce0:	f7fd fce2 	bl	80006a8 <__aeabi_uldivmod>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <UART_SetConfig+0x6f4>)
 8002cec:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	2164      	movs	r1, #100	; 0x64
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	3332      	adds	r3, #50	; 0x32
 8002cfe:	4a2d      	ldr	r2, [pc, #180]	; (8002db4 <UART_SetConfig+0x6f4>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0a:	4498      	add	r8, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	469b      	mov	fp, r3
 8002d10:	f04f 0c00 	mov.w	ip, #0
 8002d14:	46d9      	mov	r9, fp
 8002d16:	46e2      	mov	sl, ip
 8002d18:	eb19 0309 	adds.w	r3, r9, r9
 8002d1c:	eb4a 040a 	adc.w	r4, sl, sl
 8002d20:	4699      	mov	r9, r3
 8002d22:	46a2      	mov	sl, r4
 8002d24:	eb19 090b 	adds.w	r9, r9, fp
 8002d28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d40:	4689      	mov	r9, r1
 8002d42:	4692      	mov	sl, r2
 8002d44:	eb1b 0509 	adds.w	r5, fp, r9
 8002d48:	eb4c 060a 	adc.w	r6, ip, sl
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	0094      	lsls	r4, r2, #2
 8002d60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d64:	008b      	lsls	r3, r1, #2
 8002d66:	461a      	mov	r2, r3
 8002d68:	4623      	mov	r3, r4
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	4631      	mov	r1, r6
 8002d6e:	f7fd fc9b 	bl	80006a8 <__aeabi_uldivmod>
 8002d72:	4603      	mov	r3, r0
 8002d74:	460c      	mov	r4, r1
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <UART_SetConfig+0x6f4>)
 8002d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2164      	movs	r1, #100	; 0x64
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	3332      	adds	r3, #50	; 0x32
 8002d8c:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <UART_SetConfig+0x6f4>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	f003 020f 	and.w	r2, r3, #15
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4442      	add	r2, r8
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	e7ff      	b.n	8002da2 <UART_SetConfig+0x6e2>
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dac:	40011000 	.word	0x40011000
 8002db0:	40011400 	.word	0x40011400
 8002db4:	51eb851f 	.word	0x51eb851f

08002db8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002db8:	b084      	sub	sp, #16
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	f107 001c 	add.w	r0, r7, #28
 8002dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d122      	bne.n	8002e16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fa56 	bl	80032bc <USB_CoreReset>
 8002e10:	4603      	mov	r3, r0
 8002e12:	73fb      	strb	r3, [r7, #15]
 8002e14:	e01a      	b.n	8002e4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fa4a 	bl	80032bc <USB_CoreReset>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38
 8002e3e:	e005      	b.n	8002e4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10b      	bne.n	8002e6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f043 0206 	orr.w	r2, r3, #6
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f043 0220 	orr.w	r2, r3, #32
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e76:	b004      	add	sp, #16
 8002e78:	4770      	bx	lr

08002e7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f023 0201 	bic.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d106      	bne.n	8002ec8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	e00b      	b.n	8002ee0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	e001      	b.n	8002ee0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e003      	b.n	8002ee8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002ee0:	2032      	movs	r0, #50	; 0x32
 8002ee2:	f7fe fa57 	bl	8001394 <HAL_Delay>

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	e009      	b.n	8002f24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	3340      	adds	r3, #64	; 0x40
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	3301      	adds	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b0e      	cmp	r3, #14
 8002f28:	d9f2      	bls.n	8002f10 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d11c      	bne.n	8002f6a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f3e:	f043 0302 	orr.w	r3, r3, #2
 8002f42:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38
 8002f68:	e00b      	b.n	8002f82 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f94:	4619      	mov	r1, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	680b      	ldr	r3, [r1, #0]
 8002fa0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d10c      	bne.n	8002fc2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fae:	2100      	movs	r1, #0
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f949 	bl	8003248 <USB_SetDevSpeed>
 8002fb6:	e008      	b.n	8002fca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fb8:	2101      	movs	r1, #1
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f944 	bl	8003248 <USB_SetDevSpeed>
 8002fc0:	e003      	b.n	8002fca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002fc2:	2103      	movs	r1, #3
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f93f 	bl	8003248 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002fca:	2110      	movs	r1, #16
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f8f3 	bl	80031b8 <USB_FlushTxFifo>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f911 	bl	8003204 <USB_FlushRxFifo>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffe:	461a      	mov	r2, r3
 8003000:	2300      	movs	r3, #0
 8003002:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300a:	461a      	mov	r2, r3
 800300c:	2300      	movs	r3, #0
 800300e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	e043      	b.n	800309e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800302c:	d118      	bne.n	8003060 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003040:	461a      	mov	r2, r3
 8003042:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	e013      	b.n	8003072 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003056:	461a      	mov	r2, r3
 8003058:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e008      	b.n	8003072 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306c:	461a      	mov	r2, r3
 800306e:	2300      	movs	r3, #0
 8003070:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800307e:	461a      	mov	r2, r3
 8003080:	2300      	movs	r3, #0
 8003082:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003090:	461a      	mov	r2, r3
 8003092:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003096:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	3301      	adds	r3, #1
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d3b7      	bcc.n	8003016 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	e043      	b.n	8003134 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030c2:	d118      	bne.n	80030f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d6:	461a      	mov	r2, r3
 80030d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e013      	b.n	8003108 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ec:	461a      	mov	r2, r3
 80030ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	e008      	b.n	8003108 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003102:	461a      	mov	r2, r3
 8003104:	2300      	movs	r3, #0
 8003106:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003114:	461a      	mov	r2, r3
 8003116:	2300      	movs	r3, #0
 8003118:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4413      	add	r3, r2
 8003122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003126:	461a      	mov	r2, r3
 8003128:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800312c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	3301      	adds	r3, #1
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d3b7      	bcc.n	80030ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800314a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800314e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800315c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f043 0210 	orr.w	r2, r3, #16
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <USB_DevInit+0x2c4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800317c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f043 0208 	orr.w	r2, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800318e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d107      	bne.n	80031a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800319c:	f043 0304 	orr.w	r3, r3, #4
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031b0:	b004      	add	sp, #16
 80031b2:	4770      	bx	lr
 80031b4:	803c3800 	.word	0x803c3800

080031b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	019b      	lsls	r3, r3, #6
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3301      	adds	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <USB_FlushTxFifo+0x48>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e006      	b.n	80031f2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d0f0      	beq.n	80031d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	00030d40 	.word	0x00030d40

08003204 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2210      	movs	r2, #16
 8003214:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3301      	adds	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a09      	ldr	r2, [pc, #36]	; (8003244 <USB_FlushRxFifo+0x40>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d901      	bls.n	8003228 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e006      	b.n	8003236 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b10      	cmp	r3, #16
 8003232:	d0f0      	beq.n	8003216 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	00030d40 	.word	0x00030d40

08003248 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	68f9      	ldr	r1, [r7, #12]
 8003264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003268:	4313      	orrs	r3, r2
 800326a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003294:	f023 0303 	bic.w	r3, r3, #3
 8003298:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a13      	ldr	r2, [pc, #76]	; (8003320 <USB_CoreReset+0x64>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e01b      	b.n	8003312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	daf2      	bge.n	80032c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3301      	adds	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <USB_CoreReset+0x64>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e006      	b.n	8003312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d0f0      	beq.n	80032f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	00030d40 	.word	0x00030d40

08003324 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800333a:	f3ef 8305 	mrs	r3, IPSR
 800333e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003340:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10f      	bne.n	8003366 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003346:	f3ef 8310 	mrs	r3, PRIMASK
 800334a:	607b      	str	r3, [r7, #4]
  return(result);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003352:	f3ef 8311 	mrs	r3, BASEPRI
 8003356:	603b      	str	r3, [r7, #0]
  return(result);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <osKernelInitialize+0x3a>
 800335e:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <osKernelInitialize+0x64>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d103      	bne.n	800336e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003366:	f06f 0305 	mvn.w	r3, #5
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e00c      	b.n	8003388 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <osKernelInitialize+0x64>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d105      	bne.n	8003382 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <osKernelInitialize+0x64>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e002      	b.n	8003388 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003388:	68fb      	ldr	r3, [r7, #12]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000094 	.word	0x20000094

0800339c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033a2:	f3ef 8305 	mrs	r3, IPSR
 80033a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80033a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ae:	f3ef 8310 	mrs	r3, PRIMASK
 80033b2:	607b      	str	r3, [r7, #4]
  return(result);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033ba:	f3ef 8311 	mrs	r3, BASEPRI
 80033be:	603b      	str	r3, [r7, #0]
  return(result);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <osKernelStart+0x3a>
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <osKernelStart+0x68>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d103      	bne.n	80033d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80033ce:	f06f 0305 	mvn.w	r3, #5
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e010      	b.n	80033f8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <osKernelStart+0x68>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d109      	bne.n	80033f2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80033de:	f7ff ffa1 	bl	8003324 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <osKernelStart+0x68>)
 80033e4:	2202      	movs	r2, #2
 80033e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80033e8:	f001 f870 	bl	80044cc <vTaskStartScheduler>
      stat = osOK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e002      	b.n	80033f8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
 80033f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033f8:	68fb      	ldr	r3, [r7, #12]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000094 	.word	0x20000094

08003408 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b090      	sub	sp, #64	; 0x40
 800340c:	af04      	add	r7, sp, #16
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003418:	f3ef 8305 	mrs	r3, IPSR
 800341c:	61fb      	str	r3, [r7, #28]
  return(result);
 800341e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003420:	2b00      	cmp	r3, #0
 8003422:	f040 808f 	bne.w	8003544 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003426:	f3ef 8310 	mrs	r3, PRIMASK
 800342a:	61bb      	str	r3, [r7, #24]
  return(result);
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003432:	f3ef 8311 	mrs	r3, BASEPRI
 8003436:	617b      	str	r3, [r7, #20]
  return(result);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <osThreadNew+0x3e>
 800343e:	4b44      	ldr	r3, [pc, #272]	; (8003550 <osThreadNew+0x148>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d07e      	beq.n	8003544 <osThreadNew+0x13c>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d07b      	beq.n	8003544 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003450:	2318      	movs	r3, #24
 8003452:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003454:	2300      	movs	r3, #0
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003458:	f04f 33ff 	mov.w	r3, #4294967295
 800345c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d045      	beq.n	80034f0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <osThreadNew+0x6a>
        name = attr->name;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <osThreadNew+0x90>
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	2b38      	cmp	r3, #56	; 0x38
 800348a:	d805      	bhi.n	8003498 <osThreadNew+0x90>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <osThreadNew+0x94>
        return (NULL);
 8003498:	2300      	movs	r3, #0
 800349a:	e054      	b.n	8003546 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	089b      	lsrs	r3, r3, #2
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00e      	beq.n	80034d2 <osThreadNew+0xca>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b5b      	cmp	r3, #91	; 0x5b
 80034ba:	d90a      	bls.n	80034d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d006      	beq.n	80034d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <osThreadNew+0xca>
        mem = 1;
 80034cc:	2301      	movs	r3, #1
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	e010      	b.n	80034f4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10c      	bne.n	80034f4 <osThreadNew+0xec>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d108      	bne.n	80034f4 <osThreadNew+0xec>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d104      	bne.n	80034f4 <osThreadNew+0xec>
          mem = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	623b      	str	r3, [r7, #32]
 80034ee:	e001      	b.n	80034f4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d110      	bne.n	800351c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003502:	9202      	str	r2, [sp, #8]
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800350e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fe09 	bl	8004128 <xTaskCreateStatic>
 8003516:	4603      	mov	r3, r0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	e013      	b.n	8003544 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d110      	bne.n	8003544 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	b29a      	uxth	r2, r3
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fe51 	bl	80041dc <xTaskCreate>
 800353a:	4603      	mov	r3, r0
 800353c:	2b01      	cmp	r3, #1
 800353e:	d001      	beq.n	8003544 <osThreadNew+0x13c>
          hTask = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003544:	693b      	ldr	r3, [r7, #16]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3730      	adds	r7, #48	; 0x30
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000094 	.word	0x20000094

08003554 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800355c:	f3ef 8305 	mrs	r3, IPSR
 8003560:	613b      	str	r3, [r7, #16]
  return(result);
 8003562:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10f      	bne.n	8003588 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003568:	f3ef 8310 	mrs	r3, PRIMASK
 800356c:	60fb      	str	r3, [r7, #12]
  return(result);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003574:	f3ef 8311 	mrs	r3, BASEPRI
 8003578:	60bb      	str	r3, [r7, #8]
  return(result);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <osDelay+0x3c>
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <osDelay+0x58>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d103      	bne.n	8003590 <osDelay+0x3c>
    stat = osErrorISR;
 8003588:	f06f 0305 	mvn.w	r3, #5
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e007      	b.n	80035a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 ff62 	bl	8004464 <vTaskDelay>
    }
  }

  return (stat);
 80035a0:	697b      	ldr	r3, [r7, #20]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000094 	.word	0x20000094

080035b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a07      	ldr	r2, [pc, #28]	; (80035dc <vApplicationGetIdleTaskMemory+0x2c>)
 80035c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4a06      	ldr	r2, [pc, #24]	; (80035e0 <vApplicationGetIdleTaskMemory+0x30>)
 80035c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	601a      	str	r2, [r3, #0]
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000098 	.word	0x20000098
 80035e0:	200000f4 	.word	0x200000f4

080035e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a07      	ldr	r2, [pc, #28]	; (8003610 <vApplicationGetTimerTaskMemory+0x2c>)
 80035f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4a06      	ldr	r2, [pc, #24]	; (8003614 <vApplicationGetTimerTaskMemory+0x30>)
 80035fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003602:	601a      	str	r2, [r3, #0]
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	200002f4 	.word	0x200002f4
 8003614:	20000350 	.word	0x20000350

08003618 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f103 0208 	add.w	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f04f 32ff 	mov.w	r2, #4294967295
 8003630:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f103 0208 	add.w	r2, r3, #8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f103 0208 	add.w	r2, r3, #8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003672:	b480      	push	{r7}
 8003674:	b085      	sub	sp, #20
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	601a      	str	r2, [r3, #0]
}
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d103      	bne.n	80036da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e00c      	b.n	80036f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3308      	adds	r3, #8
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e002      	b.n	80036e8 <vListInsert+0x2e>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d2f6      	bcs.n	80036e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	601a      	str	r2, [r3, #0]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6892      	ldr	r2, [r2, #8]
 8003742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6852      	ldr	r2, [r2, #4]
 800374c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	d103      	bne.n	8003760 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	1e5a      	subs	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	e7fe      	b.n	80037a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80037a8:	f002 f810 	bl	80057cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	68f9      	ldr	r1, [r7, #12]
 80037b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	441a      	add	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	3b01      	subs	r3, #1
 80037da:	68f9      	ldr	r1, [r7, #12]
 80037dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	441a      	add	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	22ff      	movs	r2, #255	; 0xff
 80037ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	22ff      	movs	r2, #255	; 0xff
 80037f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d114      	bne.n	8003828 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01a      	beq.n	800383c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3310      	adds	r3, #16
 800380a:	4618      	mov	r0, r3
 800380c:	f001 f8de 	bl	80049cc <xTaskRemoveFromEventList>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d012      	beq.n	800383c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <xQueueGenericReset+0xcc>)
 8003818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	e009      	b.n	800383c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3310      	adds	r3, #16
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fef3 	bl	8003618 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3324      	adds	r3, #36	; 0x24
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff feee 	bl	8003618 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800383c:	f001 fff4 	bl	8005828 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003840:	2301      	movs	r3, #1
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	e000ed04 	.word	0xe000ed04

08003850 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08e      	sub	sp, #56	; 0x38
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <xQueueGenericCreateStatic+0x28>
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
 8003876:	e7fe      	b.n	8003876 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <xQueueGenericCreateStatic+0x42>
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
 8003890:	e7fe      	b.n	8003890 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <xQueueGenericCreateStatic+0x4e>
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <xQueueGenericCreateStatic+0x52>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <xQueueGenericCreateStatic+0x54>
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <xQueueGenericCreateStatic+0x6c>
 80038a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	623b      	str	r3, [r7, #32]
 80038ba:	e7fe      	b.n	80038ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <xQueueGenericCreateStatic+0x78>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <xQueueGenericCreateStatic+0x7c>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <xQueueGenericCreateStatic+0x7e>
 80038cc:	2300      	movs	r3, #0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <xQueueGenericCreateStatic+0x96>
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	e7fe      	b.n	80038e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038e6:	2350      	movs	r3, #80	; 0x50
 80038e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b50      	cmp	r3, #80	; 0x50
 80038ee:	d009      	beq.n	8003904 <xQueueGenericCreateStatic+0xb4>
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	e7fe      	b.n	8003902 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003904:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003918:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f805 	bl	8003936 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800392e:	4618      	mov	r0, r3
 8003930:	3730      	adds	r7, #48	; 0x30
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	e002      	b.n	8003958 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003964:	2101      	movs	r1, #1
 8003966:	69b8      	ldr	r0, [r7, #24]
 8003968:	f7ff ff0a 	bl	8003780 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08e      	sub	sp, #56	; 0x38
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800398a:	2300      	movs	r3, #0
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <xQueueGenericSend+0x30>
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039aa:	e7fe      	b.n	80039aa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <xQueueGenericSend+0x3e>
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <xQueueGenericSend+0x42>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <xQueueGenericSend+0x44>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <xQueueGenericSend+0x5c>
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
 80039d6:	e7fe      	b.n	80039d6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d103      	bne.n	80039e6 <xQueueGenericSend+0x6a>
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <xQueueGenericSend+0x6e>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <xQueueGenericSend+0x70>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <xQueueGenericSend+0x88>
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	623b      	str	r3, [r7, #32]
 8003a02:	e7fe      	b.n	8003a02 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a04:	f001 f998 	bl	8004d38 <xTaskGetSchedulerState>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <xQueueGenericSend+0x98>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <xQueueGenericSend+0x9c>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <xQueueGenericSend+0x9e>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <xQueueGenericSend+0xb6>
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	e7fe      	b.n	8003a30 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a32:	f001 fecb 	bl	80057cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d302      	bcc.n	8003a48 <xQueueGenericSend+0xcc>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d129      	bne.n	8003a9c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a4e:	f000 f9ff 	bl	8003e50 <prvCopyDataToQueue>
 8003a52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d010      	beq.n	8003a7e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	3324      	adds	r3, #36	; 0x24
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 ffb3 	bl	80049cc <xTaskRemoveFromEventList>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a6c:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <xQueueGenericSend+0x1f0>)
 8003a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	e00a      	b.n	8003a94 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a84:	4b39      	ldr	r3, [pc, #228]	; (8003b6c <xQueueGenericSend+0x1f0>)
 8003a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a94:	f001 fec8 	bl	8005828 <vPortExitCritical>
				return pdPASS;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e063      	b.n	8003b64 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003aa2:	f001 fec1 	bl	8005828 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e05c      	b.n	8003b64 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d106      	bne.n	8003abe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 ffeb 	bl	8004a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aba:	2301      	movs	r3, #1
 8003abc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003abe:	f001 feb3 	bl	8005828 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ac2:	f000 fd67 	bl	8004594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ac6:	f001 fe81 	bl	80057cc <vPortEnterCritical>
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad0:	b25b      	sxtb	r3, r3
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad6:	d103      	bne.n	8003ae0 <xQueueGenericSend+0x164>
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ae6:	b25b      	sxtb	r3, r3
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d103      	bne.n	8003af6 <xQueueGenericSend+0x17a>
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003af6:	f001 fe97 	bl	8005828 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003afa:	1d3a      	adds	r2, r7, #4
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 ffda 	bl	8004abc <xTaskCheckForTimeOut>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d124      	bne.n	8003b58 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b10:	f000 fa96 	bl	8004040 <prvIsQueueFull>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d018      	beq.n	8003b4c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	3310      	adds	r3, #16
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 ff04 	bl	8004930 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b2a:	f000 fa21 	bl	8003f70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b2e:	f000 fd3f 	bl	80045b0 <xTaskResumeAll>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f47f af7c 	bne.w	8003a32 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <xQueueGenericSend+0x1f0>)
 8003b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	e772      	b.n	8003a32 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b4e:	f000 fa0f 	bl	8003f70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b52:	f000 fd2d 	bl	80045b0 <xTaskResumeAll>
 8003b56:	e76c      	b.n	8003a32 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b5a:	f000 fa09 	bl	8003f70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b5e:	f000 fd27 	bl	80045b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3738      	adds	r7, #56	; 0x38
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	e000ed04 	.word	0xe000ed04

08003b70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08e      	sub	sp, #56	; 0x38
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d109      	bne.n	8003b9c <xQueueGenericSendFromISR+0x2c>
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	e7fe      	b.n	8003b9a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <xQueueGenericSendFromISR+0x3a>
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <xQueueGenericSendFromISR+0x3e>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <xQueueGenericSendFromISR+0x40>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <xQueueGenericSendFromISR+0x58>
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	623b      	str	r3, [r7, #32]
 8003bc6:	e7fe      	b.n	8003bc6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d103      	bne.n	8003bd6 <xQueueGenericSendFromISR+0x66>
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <xQueueGenericSendFromISR+0x6a>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <xQueueGenericSendFromISR+0x6c>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d109      	bne.n	8003bf4 <xQueueGenericSendFromISR+0x84>
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	e7fe      	b.n	8003bf2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bf4:	f001 fec6 	bl	8005984 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bf8:	f3ef 8211 	mrs	r2, BASEPRI
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	61ba      	str	r2, [r7, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c10:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d302      	bcc.n	8003c26 <xQueueGenericSendFromISR+0xb6>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d12c      	bne.n	8003c80 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c36:	f000 f90b 	bl	8003e50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c3a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d112      	bne.n	8003c6a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d016      	beq.n	8003c7a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	3324      	adds	r3, #36	; 0x24
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 febb 	bl	80049cc <xTaskRemoveFromEventList>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00e      	beq.n	8003c7a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e007      	b.n	8003c7a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c6e:	3301      	adds	r3, #1
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	b25a      	sxtb	r2, r3
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003c7e:	e001      	b.n	8003c84 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	637b      	str	r3, [r7, #52]	; 0x34
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3738      	adds	r7, #56	; 0x38
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08c      	sub	sp, #48	; 0x30
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <xQueueReceive+0x2e>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	623b      	str	r3, [r7, #32]
 8003cc4:	e7fe      	b.n	8003cc4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <xQueueReceive+0x3c>
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <xQueueReceive+0x40>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <xQueueReceive+0x42>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <xQueueReceive+0x5a>
 8003cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	e7fe      	b.n	8003cf0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cf2:	f001 f821 	bl	8004d38 <xTaskGetSchedulerState>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <xQueueReceive+0x6a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <xQueueReceive+0x6e>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <xQueueReceive+0x70>
 8003d06:	2300      	movs	r3, #0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <xQueueReceive+0x88>
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	e7fe      	b.n	8003d1e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d20:	f001 fd54 	bl	80057cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01f      	beq.n	8003d70 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d34:	f000 f8f6 	bl	8003f24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	1e5a      	subs	r2, r3, #1
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00f      	beq.n	8003d68 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	3310      	adds	r3, #16
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fe3d 	bl	80049cc <xTaskRemoveFromEventList>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d58:	4b3c      	ldr	r3, [pc, #240]	; (8003e4c <xQueueReceive+0x1b4>)
 8003d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d68:	f001 fd5e 	bl	8005828 <vPortExitCritical>
				return pdPASS;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e069      	b.n	8003e44 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d76:	f001 fd57 	bl	8005828 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e062      	b.n	8003e44 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d84:	f107 0310 	add.w	r3, r7, #16
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fe81 	bl	8004a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d92:	f001 fd49 	bl	8005828 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d96:	f000 fbfd 	bl	8004594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d9a:	f001 fd17 	bl	80057cc <vPortEnterCritical>
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d103      	bne.n	8003db4 <xQueueReceive+0x11c>
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d103      	bne.n	8003dca <xQueueReceive+0x132>
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dca:	f001 fd2d 	bl	8005828 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dce:	1d3a      	adds	r2, r7, #4
 8003dd0:	f107 0310 	add.w	r3, r7, #16
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fe70 	bl	8004abc <xTaskCheckForTimeOut>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d123      	bne.n	8003e2a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de4:	f000 f916 	bl	8004014 <prvIsQueueEmpty>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d017      	beq.n	8003e1e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	3324      	adds	r3, #36	; 0x24
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fd9a 	bl	8004930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dfe:	f000 f8b7 	bl	8003f70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e02:	f000 fbd5 	bl	80045b0 <xTaskResumeAll>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d189      	bne.n	8003d20 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <xQueueReceive+0x1b4>)
 8003e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	e780      	b.n	8003d20 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e20:	f000 f8a6 	bl	8003f70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e24:	f000 fbc4 	bl	80045b0 <xTaskResumeAll>
 8003e28:	e77a      	b.n	8003d20 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e2c:	f000 f8a0 	bl	8003f70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e30:	f000 fbbe 	bl	80045b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e36:	f000 f8ed 	bl	8004014 <prvIsQueueEmpty>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f43f af6f 	beq.w	8003d20 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3730      	adds	r7, #48	; 0x30
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	e000ed04 	.word	0xe000ed04

08003e50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10d      	bne.n	8003e8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d14d      	bne.n	8003f12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 ff7a 	bl	8004d74 <xTaskPriorityDisinherit>
 8003e80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	e043      	b.n	8003f12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d119      	bne.n	8003ec4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6858      	ldr	r0, [r3, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	461a      	mov	r2, r3
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	f001 ffb0 	bl	8005e00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	441a      	add	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d32b      	bcc.n	8003f12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	e026      	b.n	8003f12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	68d8      	ldr	r0, [r3, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	f001 ff96 	bl	8005e00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	425b      	negs	r3, r3
 8003ede:	441a      	add	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d207      	bcs.n	8003f00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	425b      	negs	r3, r3
 8003efa:	441a      	add	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d105      	bne.n	8003f12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f1a:	697b      	ldr	r3, [r7, #20]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d018      	beq.n	8003f68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	441a      	add	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d303      	bcc.n	8003f58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68d9      	ldr	r1, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	461a      	mov	r2, r3
 8003f62:	6838      	ldr	r0, [r7, #0]
 8003f64:	f001 ff4c 	bl	8005e00 <memcpy>
	}
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f78:	f001 fc28 	bl	80057cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f84:	e011      	b.n	8003faa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d012      	beq.n	8003fb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3324      	adds	r3, #36	; 0x24
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fd1a 	bl	80049cc <xTaskRemoveFromEventList>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f9e:	f000 fded 	bl	8004b7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	dce9      	bgt.n	8003f86 <prvUnlockQueue+0x16>
 8003fb2:	e000      	b.n	8003fb6 <prvUnlockQueue+0x46>
					break;
 8003fb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	22ff      	movs	r2, #255	; 0xff
 8003fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fbe:	f001 fc33 	bl	8005828 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fc2:	f001 fc03 	bl	80057cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fce:	e011      	b.n	8003ff4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d012      	beq.n	8003ffe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3310      	adds	r3, #16
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fcf5 	bl	80049cc <xTaskRemoveFromEventList>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003fe8:	f000 fdc8 	bl	8004b7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fec:	7bbb      	ldrb	r3, [r7, #14]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	dce9      	bgt.n	8003fd0 <prvUnlockQueue+0x60>
 8003ffc:	e000      	b.n	8004000 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ffe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	22ff      	movs	r2, #255	; 0xff
 8004004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004008:	f001 fc0e 	bl	8005828 <vPortExitCritical>
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800401c:	f001 fbd6 	bl	80057cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004028:	2301      	movs	r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e001      	b.n	8004032 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004032:	f001 fbf9 	bl	8005828 <vPortExitCritical>

	return xReturn;
 8004036:	68fb      	ldr	r3, [r7, #12]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004048:	f001 fbc0 	bl	80057cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004054:	429a      	cmp	r2, r3
 8004056:	d102      	bne.n	800405e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004058:	2301      	movs	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e001      	b.n	8004062 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004062:	f001 fbe1 	bl	8005828 <vPortExitCritical>

	return xReturn;
 8004066:	68fb      	ldr	r3, [r7, #12]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e014      	b.n	80040aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004080:	4a0e      	ldr	r2, [pc, #56]	; (80040bc <vQueueAddToRegistry+0x4c>)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10b      	bne.n	80040a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800408c:	490b      	ldr	r1, [pc, #44]	; (80040bc <vQueueAddToRegistry+0x4c>)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004096:	4a09      	ldr	r2, [pc, #36]	; (80040bc <vQueueAddToRegistry+0x4c>)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040a2:	e005      	b.n	80040b0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b07      	cmp	r3, #7
 80040ae:	d9e7      	bls.n	8004080 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	20004e48 	.word	0x20004e48

080040c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040d0:	f001 fb7c 	bl	80057cc <vPortEnterCritical>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040da:	b25b      	sxtb	r3, r3
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d103      	bne.n	80040ea <vQueueWaitForMessageRestricted+0x2a>
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f6:	d103      	bne.n	8004100 <vQueueWaitForMessageRestricted+0x40>
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004100:	f001 fb92 	bl	8005828 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	2b00      	cmp	r3, #0
 800410a:	d106      	bne.n	800411a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	3324      	adds	r3, #36	; 0x24
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fc2f 	bl	8004978 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800411a:	6978      	ldr	r0, [r7, #20]
 800411c:	f7ff ff28 	bl	8003f70 <prvUnlockQueue>
	}
 8004120:	bf00      	nop
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08e      	sub	sp, #56	; 0x38
 800412c:	af04      	add	r7, sp, #16
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <xTaskCreateStatic+0x28>
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	623b      	str	r3, [r7, #32]
 800414e:	e7fe      	b.n	800414e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <xTaskCreateStatic+0x42>
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e7fe      	b.n	8004168 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800416a:	235c      	movs	r3, #92	; 0x5c
 800416c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b5c      	cmp	r3, #92	; 0x5c
 8004172:	d009      	beq.n	8004188 <xTaskCreateStatic+0x60>
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	e7fe      	b.n	8004186 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004188:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01e      	beq.n	80041ce <xTaskCreateStatic+0xa6>
 8004190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01b      	beq.n	80041ce <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800419e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041a8:	2300      	movs	r3, #0
 80041aa:	9303      	str	r3, [sp, #12]
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	9302      	str	r3, [sp, #8]
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f850 	bl	8004266 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041c8:	f000 f8dc 	bl	8004384 <prvAddNewTaskToReadyList>
 80041cc:	e001      	b.n	80041d2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041d2:	697b      	ldr	r3, [r7, #20]
	}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3728      	adds	r7, #40	; 0x28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08c      	sub	sp, #48	; 0x30
 80041e0:	af04      	add	r7, sp, #16
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f001 fc05 	bl	8005a00 <pvPortMalloc>
 80041f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00e      	beq.n	800421c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041fe:	205c      	movs	r0, #92	; 0x5c
 8004200:	f001 fbfe 	bl	8005a00 <pvPortMalloc>
 8004204:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
 8004212:	e005      	b.n	8004220 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004214:	6978      	ldr	r0, [r7, #20]
 8004216:	f001 fcb5 	bl	8005b84 <vPortFree>
 800421a:	e001      	b.n	8004220 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800421c:	2300      	movs	r3, #0
 800421e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d017      	beq.n	8004256 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	2300      	movs	r3, #0
 8004232:	9303      	str	r3, [sp, #12]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	9302      	str	r3, [sp, #8]
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f80e 	bl	8004266 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800424a:	69f8      	ldr	r0, [r7, #28]
 800424c:	f000 f89a 	bl	8004384 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004250:	2301      	movs	r3, #1
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e002      	b.n	800425c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004256:	f04f 33ff 	mov.w	r3, #4294967295
 800425a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800425c:	69bb      	ldr	r3, [r7, #24]
	}
 800425e:	4618      	mov	r0, r3
 8004260:	3720      	adds	r7, #32
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b088      	sub	sp, #32
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	461a      	mov	r2, r3
 800427e:	21a5      	movs	r1, #165	; 0xa5
 8004280:	f001 fdc9 	bl	8005e16 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800428e:	3b01      	subs	r3, #1
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f023 0307 	bic.w	r3, r3, #7
 800429c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d009      	beq.n	80042bc <prvInitialiseNewTask+0x56>
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e7fe      	b.n	80042ba <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d01f      	beq.n	8004302 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	e012      	b.n	80042ee <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	4413      	add	r3, r2
 80042ce:	7819      	ldrb	r1, [r3, #0]
 80042d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	4413      	add	r3, r2
 80042d6:	3334      	adds	r3, #52	; 0x34
 80042d8:	460a      	mov	r2, r1
 80042da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d006      	beq.n	80042f6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	3301      	adds	r3, #1
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	2b0f      	cmp	r3, #15
 80042f2:	d9e9      	bls.n	80042c8 <prvInitialiseNewTask+0x62>
 80042f4:	e000      	b.n	80042f8 <prvInitialiseNewTask+0x92>
			{
				break;
 80042f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004300:	e003      	b.n	800430a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	2b37      	cmp	r3, #55	; 0x37
 800430e:	d901      	bls.n	8004314 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004310:	2337      	movs	r3, #55	; 0x37
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004318:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800431e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	2200      	movs	r2, #0
 8004324:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	3304      	adds	r3, #4
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff f994 	bl	8003658 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	3318      	adds	r3, #24
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff f98f 	bl	8003658 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	2200      	movs	r2, #0
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	68f9      	ldr	r1, [r7, #12]
 8004362:	69b8      	ldr	r0, [r7, #24]
 8004364:	f001 f90c 	bl	8005580 <pxPortInitialiseStack>
 8004368:	4602      	mov	r2, r0
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800437a:	bf00      	nop
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800438c:	f001 fa1e 	bl	80057cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004390:	4b2d      	ldr	r3, [pc, #180]	; (8004448 <prvAddNewTaskToReadyList+0xc4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	4a2c      	ldr	r2, [pc, #176]	; (8004448 <prvAddNewTaskToReadyList+0xc4>)
 8004398:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800439a:	4b2c      	ldr	r3, [pc, #176]	; (800444c <prvAddNewTaskToReadyList+0xc8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043a2:	4a2a      	ldr	r2, [pc, #168]	; (800444c <prvAddNewTaskToReadyList+0xc8>)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043a8:	4b27      	ldr	r3, [pc, #156]	; (8004448 <prvAddNewTaskToReadyList+0xc4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d110      	bne.n	80043d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043b0:	f000 fc08 	bl	8004bc4 <prvInitialiseTaskLists>
 80043b4:	e00d      	b.n	80043d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043b6:	4b26      	ldr	r3, [pc, #152]	; (8004450 <prvAddNewTaskToReadyList+0xcc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043be:	4b23      	ldr	r3, [pc, #140]	; (800444c <prvAddNewTaskToReadyList+0xc8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d802      	bhi.n	80043d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043cc:	4a1f      	ldr	r2, [pc, #124]	; (800444c <prvAddNewTaskToReadyList+0xc8>)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043d2:	4b20      	ldr	r3, [pc, #128]	; (8004454 <prvAddNewTaskToReadyList+0xd0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3301      	adds	r3, #1
 80043d8:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <prvAddNewTaskToReadyList+0xd0>)
 80043da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043dc:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <prvAddNewTaskToReadyList+0xd0>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e8:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <prvAddNewTaskToReadyList+0xd4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d903      	bls.n	80043f8 <prvAddNewTaskToReadyList+0x74>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	4a18      	ldr	r2, [pc, #96]	; (8004458 <prvAddNewTaskToReadyList+0xd4>)
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4a15      	ldr	r2, [pc, #84]	; (800445c <prvAddNewTaskToReadyList+0xd8>)
 8004406:	441a      	add	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f7ff f92f 	bl	8003672 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004414:	f001 fa08 	bl	8005828 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004418:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <prvAddNewTaskToReadyList+0xcc>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00e      	beq.n	800443e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <prvAddNewTaskToReadyList+0xc8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	429a      	cmp	r2, r3
 800442c:	d207      	bcs.n	800443e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <prvAddNewTaskToReadyList+0xdc>)
 8004430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000c24 	.word	0x20000c24
 800444c:	20000750 	.word	0x20000750
 8004450:	20000c30 	.word	0x20000c30
 8004454:	20000c40 	.word	0x20000c40
 8004458:	20000c2c 	.word	0x20000c2c
 800445c:	20000754 	.word	0x20000754
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004476:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <vTaskDelay+0x60>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <vTaskDelay+0x2e>
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	e7fe      	b.n	8004490 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004492:	f000 f87f 	bl	8004594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004496:	2100      	movs	r1, #0
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fcd7 	bl	8004e4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800449e:	f000 f887 	bl	80045b0 <xTaskResumeAll>
 80044a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d107      	bne.n	80044ba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <vTaskDelay+0x64>)
 80044ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000c4c 	.word	0x20000c4c
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	; 0x28
 80044d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044da:	463a      	mov	r2, r7
 80044dc:	1d39      	adds	r1, r7, #4
 80044de:	f107 0308 	add.w	r3, r7, #8
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff f864 	bl	80035b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044e8:	6839      	ldr	r1, [r7, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	9202      	str	r2, [sp, #8]
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	2300      	movs	r3, #0
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	2300      	movs	r3, #0
 80044f8:	460a      	mov	r2, r1
 80044fa:	4920      	ldr	r1, [pc, #128]	; (800457c <vTaskStartScheduler+0xb0>)
 80044fc:	4820      	ldr	r0, [pc, #128]	; (8004580 <vTaskStartScheduler+0xb4>)
 80044fe:	f7ff fe13 	bl	8004128 <xTaskCreateStatic>
 8004502:	4602      	mov	r2, r0
 8004504:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <vTaskStartScheduler+0xb8>)
 8004506:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004508:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <vTaskStartScheduler+0xb8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004510:	2301      	movs	r3, #1
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	e001      	b.n	800451a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d102      	bne.n	8004526 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004520:	f000 fce8 	bl	8004ef4 <xTimerCreateTimerTask>
 8004524:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d115      	bne.n	8004558 <vTaskStartScheduler+0x8c>
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800453e:	4b12      	ldr	r3, [pc, #72]	; (8004588 <vTaskStartScheduler+0xbc>)
 8004540:	f04f 32ff 	mov.w	r2, #4294967295
 8004544:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004546:	4b11      	ldr	r3, [pc, #68]	; (800458c <vTaskStartScheduler+0xc0>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <vTaskStartScheduler+0xc4>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004552:	f001 f89d 	bl	8005690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004556:	e00d      	b.n	8004574 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d109      	bne.n	8004574 <vTaskStartScheduler+0xa8>
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e7fe      	b.n	8004572 <vTaskStartScheduler+0xa6>
}
 8004574:	bf00      	nop
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	08006680 	.word	0x08006680
 8004580:	08004b95 	.word	0x08004b95
 8004584:	20000c48 	.word	0x20000c48
 8004588:	20000c44 	.word	0x20000c44
 800458c:	20000c30 	.word	0x20000c30
 8004590:	20000c28 	.word	0x20000c28

08004594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <vTaskSuspendAll+0x18>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	4a03      	ldr	r2, [pc, #12]	; (80045ac <vTaskSuspendAll+0x18>)
 80045a0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80045a2:	bf00      	nop
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	20000c4c 	.word	0x20000c4c

080045b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045be:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <xTaskResumeAll+0x114>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <xTaskResumeAll+0x2a>
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	e7fe      	b.n	80045d8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045da:	f001 f8f7 	bl	80057cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045de:	4b39      	ldr	r3, [pc, #228]	; (80046c4 <xTaskResumeAll+0x114>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	4a37      	ldr	r2, [pc, #220]	; (80046c4 <xTaskResumeAll+0x114>)
 80045e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045e8:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <xTaskResumeAll+0x114>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d162      	bne.n	80046b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <xTaskResumeAll+0x118>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d05e      	beq.n	80046b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045f8:	e02f      	b.n	800465a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fa:	4b34      	ldr	r3, [pc, #208]	; (80046cc <xTaskResumeAll+0x11c>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3318      	adds	r3, #24
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f890 	bl	800372c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3304      	adds	r3, #4
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff f88b 	bl	800372c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461a:	4b2d      	ldr	r3, [pc, #180]	; (80046d0 <xTaskResumeAll+0x120>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d903      	bls.n	800462a <xTaskResumeAll+0x7a>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <xTaskResumeAll+0x120>)
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4a27      	ldr	r2, [pc, #156]	; (80046d4 <xTaskResumeAll+0x124>)
 8004638:	441a      	add	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3304      	adds	r3, #4
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f7ff f816 	bl	8003672 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464a:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <xTaskResumeAll+0x128>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	429a      	cmp	r2, r3
 8004652:	d302      	bcc.n	800465a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004654:	4b21      	ldr	r3, [pc, #132]	; (80046dc <xTaskResumeAll+0x12c>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800465a:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <xTaskResumeAll+0x11c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1cb      	bne.n	80045fa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004668:	f000 fb46 	bl	8004cf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <xTaskResumeAll+0x130>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004678:	f000 f846 	bl	8004708 <xTaskIncrementTick>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004682:	4b16      	ldr	r3, [pc, #88]	; (80046dc <xTaskResumeAll+0x12c>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3b01      	subs	r3, #1
 800468c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f1      	bne.n	8004678 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004694:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <xTaskResumeAll+0x130>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800469a:	4b10      	ldr	r3, [pc, #64]	; (80046dc <xTaskResumeAll+0x12c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046a2:	2301      	movs	r3, #1
 80046a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <xTaskResumeAll+0x134>)
 80046a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046b6:	f001 f8b7 	bl	8005828 <vPortExitCritical>

	return xAlreadyYielded;
 80046ba:	68bb      	ldr	r3, [r7, #8]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000c4c 	.word	0x20000c4c
 80046c8:	20000c24 	.word	0x20000c24
 80046cc:	20000be4 	.word	0x20000be4
 80046d0:	20000c2c 	.word	0x20000c2c
 80046d4:	20000754 	.word	0x20000754
 80046d8:	20000750 	.word	0x20000750
 80046dc:	20000c38 	.word	0x20000c38
 80046e0:	20000c34 	.word	0x20000c34
 80046e4:	e000ed04 	.word	0xe000ed04

080046e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046ee:	4b05      	ldr	r3, [pc, #20]	; (8004704 <xTaskGetTickCount+0x1c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046f4:	687b      	ldr	r3, [r7, #4]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	20000c28 	.word	0x20000c28

08004708 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004712:	4b4e      	ldr	r3, [pc, #312]	; (800484c <xTaskIncrementTick+0x144>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f040 8088 	bne.w	800482c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800471c:	4b4c      	ldr	r3, [pc, #304]	; (8004850 <xTaskIncrementTick+0x148>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3301      	adds	r3, #1
 8004722:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004724:	4a4a      	ldr	r2, [pc, #296]	; (8004850 <xTaskIncrementTick+0x148>)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d11f      	bne.n	8004770 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004730:	4b48      	ldr	r3, [pc, #288]	; (8004854 <xTaskIncrementTick+0x14c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <xTaskIncrementTick+0x46>
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	e7fe      	b.n	800474c <xTaskIncrementTick+0x44>
 800474e:	4b41      	ldr	r3, [pc, #260]	; (8004854 <xTaskIncrementTick+0x14c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	4b40      	ldr	r3, [pc, #256]	; (8004858 <xTaskIncrementTick+0x150>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a3e      	ldr	r2, [pc, #248]	; (8004854 <xTaskIncrementTick+0x14c>)
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	4a3e      	ldr	r2, [pc, #248]	; (8004858 <xTaskIncrementTick+0x150>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	4b3e      	ldr	r3, [pc, #248]	; (800485c <xTaskIncrementTick+0x154>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	4a3c      	ldr	r2, [pc, #240]	; (800485c <xTaskIncrementTick+0x154>)
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	f000 fac4 	bl	8004cf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004770:	4b3b      	ldr	r3, [pc, #236]	; (8004860 <xTaskIncrementTick+0x158>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	429a      	cmp	r2, r3
 8004778:	d349      	bcc.n	800480e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800477a:	4b36      	ldr	r3, [pc, #216]	; (8004854 <xTaskIncrementTick+0x14c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004784:	4b36      	ldr	r3, [pc, #216]	; (8004860 <xTaskIncrementTick+0x158>)
 8004786:	f04f 32ff 	mov.w	r2, #4294967295
 800478a:	601a      	str	r2, [r3, #0]
					break;
 800478c:	e03f      	b.n	800480e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800478e:	4b31      	ldr	r3, [pc, #196]	; (8004854 <xTaskIncrementTick+0x14c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d203      	bcs.n	80047ae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047a6:	4a2e      	ldr	r2, [pc, #184]	; (8004860 <xTaskIncrementTick+0x158>)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047ac:	e02f      	b.n	800480e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe ffba 	bl	800372c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d004      	beq.n	80047ca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	3318      	adds	r3, #24
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe ffb1 	bl	800372c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4b25      	ldr	r3, [pc, #148]	; (8004864 <xTaskIncrementTick+0x15c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d903      	bls.n	80047de <xTaskIncrementTick+0xd6>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	4a22      	ldr	r2, [pc, #136]	; (8004864 <xTaskIncrementTick+0x15c>)
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <xTaskIncrementTick+0x160>)
 80047ec:	441a      	add	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7fe ff3c 	bl	8003672 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fe:	4b1b      	ldr	r3, [pc, #108]	; (800486c <xTaskIncrementTick+0x164>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	429a      	cmp	r2, r3
 8004806:	d3b8      	bcc.n	800477a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800480c:	e7b5      	b.n	800477a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800480e:	4b17      	ldr	r3, [pc, #92]	; (800486c <xTaskIncrementTick+0x164>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	4914      	ldr	r1, [pc, #80]	; (8004868 <xTaskIncrementTick+0x160>)
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d907      	bls.n	8004836 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004826:	2301      	movs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e004      	b.n	8004836 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800482c:	4b10      	ldr	r3, [pc, #64]	; (8004870 <xTaskIncrementTick+0x168>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3301      	adds	r3, #1
 8004832:	4a0f      	ldr	r2, [pc, #60]	; (8004870 <xTaskIncrementTick+0x168>)
 8004834:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <xTaskIncrementTick+0x16c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800483e:	2301      	movs	r3, #1
 8004840:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004842:	697b      	ldr	r3, [r7, #20]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20000c4c 	.word	0x20000c4c
 8004850:	20000c28 	.word	0x20000c28
 8004854:	20000bdc 	.word	0x20000bdc
 8004858:	20000be0 	.word	0x20000be0
 800485c:	20000c3c 	.word	0x20000c3c
 8004860:	20000c44 	.word	0x20000c44
 8004864:	20000c2c 	.word	0x20000c2c
 8004868:	20000754 	.word	0x20000754
 800486c:	20000750 	.word	0x20000750
 8004870:	20000c34 	.word	0x20000c34
 8004874:	20000c38 	.word	0x20000c38

08004878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800487e:	4b27      	ldr	r3, [pc, #156]	; (800491c <vTaskSwitchContext+0xa4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004886:	4b26      	ldr	r3, [pc, #152]	; (8004920 <vTaskSwitchContext+0xa8>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800488c:	e040      	b.n	8004910 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800488e:	4b24      	ldr	r3, [pc, #144]	; (8004920 <vTaskSwitchContext+0xa8>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004894:	4b23      	ldr	r3, [pc, #140]	; (8004924 <vTaskSwitchContext+0xac>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e00f      	b.n	80048bc <vTaskSwitchContext+0x44>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <vTaskSwitchContext+0x3e>
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	e7fe      	b.n	80048b4 <vTaskSwitchContext+0x3c>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	491a      	ldr	r1, [pc, #104]	; (8004928 <vTaskSwitchContext+0xb0>)
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0e5      	beq.n	800489c <vTaskSwitchContext+0x24>
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4a13      	ldr	r2, [pc, #76]	; (8004928 <vTaskSwitchContext+0xb0>)
 80048dc:	4413      	add	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	3308      	adds	r3, #8
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d104      	bne.n	8004900 <vTaskSwitchContext+0x88>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	4a09      	ldr	r2, [pc, #36]	; (800492c <vTaskSwitchContext+0xb4>)
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4a06      	ldr	r2, [pc, #24]	; (8004924 <vTaskSwitchContext+0xac>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6013      	str	r3, [r2, #0]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	20000c4c 	.word	0x20000c4c
 8004920:	20000c38 	.word	0x20000c38
 8004924:	20000c2c 	.word	0x20000c2c
 8004928:	20000754 	.word	0x20000754
 800492c:	20000750 	.word	0x20000750

08004930 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d109      	bne.n	8004954 <vTaskPlaceOnEventList+0x24>
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e7fe      	b.n	8004952 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <vTaskPlaceOnEventList+0x44>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3318      	adds	r3, #24
 800495a:	4619      	mov	r1, r3
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fe feac 	bl	80036ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004962:	2101      	movs	r1, #1
 8004964:	6838      	ldr	r0, [r7, #0]
 8004966:	f000 fa71 	bl	8004e4c <prvAddCurrentTaskToDelayedList>
}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000750 	.word	0x20000750

08004978 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <vTaskPlaceOnEventListRestricted+0x26>
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	e7fe      	b.n	800499c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <vTaskPlaceOnEventListRestricted+0x50>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3318      	adds	r3, #24
 80049a4:	4619      	mov	r1, r3
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7fe fe63 	bl	8003672 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295
 80049b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	68b8      	ldr	r0, [r7, #8]
 80049bc:	f000 fa46 	bl	8004e4c <prvAddCurrentTaskToDelayedList>
	}
 80049c0:	bf00      	nop
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000750 	.word	0x20000750

080049cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <xTaskRemoveFromEventList+0x2a>
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e7fe      	b.n	80049f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	3318      	adds	r3, #24
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fe96 	bl	800372c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a00:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <xTaskRemoveFromEventList+0xac>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d11d      	bne.n	8004a44 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fe fe8d 	bl	800372c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <xTaskRemoveFromEventList+0xb0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d903      	bls.n	8004a26 <xTaskRemoveFromEventList+0x5a>
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	4a16      	ldr	r2, [pc, #88]	; (8004a7c <xTaskRemoveFromEventList+0xb0>)
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <xTaskRemoveFromEventList+0xb4>)
 8004a34:	441a      	add	r2, r3
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f7fe fe18 	bl	8003672 <vListInsertEnd>
 8004a42:	e005      	b.n	8004a50 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	3318      	adds	r3, #24
 8004a48:	4619      	mov	r1, r3
 8004a4a:	480e      	ldr	r0, [pc, #56]	; (8004a84 <xTaskRemoveFromEventList+0xb8>)
 8004a4c:	f7fe fe11 	bl	8003672 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <xTaskRemoveFromEventList+0xbc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d905      	bls.n	8004a6a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a62:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <xTaskRemoveFromEventList+0xc0>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	e001      	b.n	8004a6e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a6e:	697b      	ldr	r3, [r7, #20]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20000c4c 	.word	0x20000c4c
 8004a7c:	20000c2c 	.word	0x20000c2c
 8004a80:	20000754 	.word	0x20000754
 8004a84:	20000be4 	.word	0x20000be4
 8004a88:	20000750 	.word	0x20000750
 8004a8c:	20000c38 	.word	0x20000c38

08004a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <vTaskInternalSetTimeOutState+0x24>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <vTaskInternalSetTimeOutState+0x28>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	605a      	str	r2, [r3, #4]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	20000c3c 	.word	0x20000c3c
 8004ab8:	20000c28 	.word	0x20000c28

08004abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d109      	bne.n	8004ae0 <xTaskCheckForTimeOut+0x24>
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	e7fe      	b.n	8004ade <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <xTaskCheckForTimeOut+0x3e>
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	e7fe      	b.n	8004af8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004afa:	f000 fe67 	bl	80057cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004afe:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <xTaskCheckForTimeOut+0xb8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b16:	d102      	bne.n	8004b1e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	e023      	b.n	8004b66 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <xTaskCheckForTimeOut+0xbc>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d007      	beq.n	8004b3a <xTaskCheckForTimeOut+0x7e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d302      	bcc.n	8004b3a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b34:	2301      	movs	r3, #1
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	e015      	b.n	8004b66 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d20b      	bcs.n	8004b5c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	1ad2      	subs	r2, r2, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff ff9d 	bl	8004a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	e004      	b.n	8004b66 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b62:	2301      	movs	r3, #1
 8004b64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b66:	f000 fe5f 	bl	8005828 <vPortExitCritical>

	return xReturn;
 8004b6a:	69fb      	ldr	r3, [r7, #28]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000c28 	.word	0x20000c28
 8004b78:	20000c3c 	.word	0x20000c3c

08004b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b80:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <vTaskMissedYield+0x14>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	20000c38 	.word	0x20000c38

08004b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b9c:	f000 f852 	bl	8004c44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ba0:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <prvIdleTask+0x28>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d9f9      	bls.n	8004b9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <prvIdleTask+0x2c>)
 8004baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bb8:	e7f0      	b.n	8004b9c <prvIdleTask+0x8>
 8004bba:	bf00      	nop
 8004bbc:	20000754 	.word	0x20000754
 8004bc0:	e000ed04 	.word	0xe000ed04

08004bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bca:	2300      	movs	r3, #0
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	e00c      	b.n	8004bea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <prvInitialiseTaskLists+0x60>)
 8004bdc:	4413      	add	r3, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe fd1a 	bl	8003618 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3301      	adds	r3, #1
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b37      	cmp	r3, #55	; 0x37
 8004bee:	d9ef      	bls.n	8004bd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bf0:	480d      	ldr	r0, [pc, #52]	; (8004c28 <prvInitialiseTaskLists+0x64>)
 8004bf2:	f7fe fd11 	bl	8003618 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bf6:	480d      	ldr	r0, [pc, #52]	; (8004c2c <prvInitialiseTaskLists+0x68>)
 8004bf8:	f7fe fd0e 	bl	8003618 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bfc:	480c      	ldr	r0, [pc, #48]	; (8004c30 <prvInitialiseTaskLists+0x6c>)
 8004bfe:	f7fe fd0b 	bl	8003618 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c02:	480c      	ldr	r0, [pc, #48]	; (8004c34 <prvInitialiseTaskLists+0x70>)
 8004c04:	f7fe fd08 	bl	8003618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c08:	480b      	ldr	r0, [pc, #44]	; (8004c38 <prvInitialiseTaskLists+0x74>)
 8004c0a:	f7fe fd05 	bl	8003618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <prvInitialiseTaskLists+0x78>)
 8004c10:	4a05      	ldr	r2, [pc, #20]	; (8004c28 <prvInitialiseTaskLists+0x64>)
 8004c12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <prvInitialiseTaskLists+0x7c>)
 8004c16:	4a05      	ldr	r2, [pc, #20]	; (8004c2c <prvInitialiseTaskLists+0x68>)
 8004c18:	601a      	str	r2, [r3, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000754 	.word	0x20000754
 8004c28:	20000bb4 	.word	0x20000bb4
 8004c2c:	20000bc8 	.word	0x20000bc8
 8004c30:	20000be4 	.word	0x20000be4
 8004c34:	20000bf8 	.word	0x20000bf8
 8004c38:	20000c10 	.word	0x20000c10
 8004c3c:	20000bdc 	.word	0x20000bdc
 8004c40:	20000be0 	.word	0x20000be0

08004c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c4a:	e019      	b.n	8004c80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c4c:	f000 fdbe 	bl	80057cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c50:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <prvCheckTasksWaitingTermination+0x4c>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fe fd65 	bl	800372c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c62:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <prvCheckTasksWaitingTermination+0x50>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <prvCheckTasksWaitingTermination+0x50>)
 8004c6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <prvCheckTasksWaitingTermination+0x54>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <prvCheckTasksWaitingTermination+0x54>)
 8004c74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c76:	f000 fdd7 	bl	8005828 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f80e 	bl	8004c9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <prvCheckTasksWaitingTermination+0x54>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e1      	bne.n	8004c4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20000bf8 	.word	0x20000bf8
 8004c94:	20000c24 	.word	0x20000c24
 8004c98:	20000c0c 	.word	0x20000c0c

08004c9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d108      	bne.n	8004cc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 ff66 	bl	8005b84 <vPortFree>
				vPortFree( pxTCB );
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 ff63 	bl	8005b84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cbe:	e017      	b.n	8004cf0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d103      	bne.n	8004cd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 ff5a 	bl	8005b84 <vPortFree>
	}
 8004cd0:	e00e      	b.n	8004cf0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d009      	beq.n	8004cf0 <prvDeleteTCB+0x54>
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	e7fe      	b.n	8004cee <prvDeleteTCB+0x52>
	}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <prvResetNextTaskUnblockTime+0x38>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d104      	bne.n	8004d12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <prvResetNextTaskUnblockTime+0x3c>)
 8004d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d10:	e008      	b.n	8004d24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d12:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <prvResetNextTaskUnblockTime+0x38>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <prvResetNextTaskUnblockTime+0x3c>)
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	20000bdc 	.word	0x20000bdc
 8004d34:	20000c44 	.word	0x20000c44

08004d38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d3e:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <xTaskGetSchedulerState+0x34>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d46:	2301      	movs	r3, #1
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	e008      	b.n	8004d5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d4c:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <xTaskGetSchedulerState+0x38>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d54:	2302      	movs	r3, #2
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	e001      	b.n	8004d5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d5e:	687b      	ldr	r3, [r7, #4]
	}
 8004d60:	4618      	mov	r0, r3
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	20000c30 	.word	0x20000c30
 8004d70:	20000c4c 	.word	0x20000c4c

08004d74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d054      	beq.n	8004e34 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d8a:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <xTaskPriorityDisinherit+0xcc>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d009      	beq.n	8004da8 <xTaskPriorityDisinherit+0x34>
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e7fe      	b.n	8004da6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <xTaskPriorityDisinherit+0x50>
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	e7fe      	b.n	8004dc2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc8:	1e5a      	subs	r2, r3, #1
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d02c      	beq.n	8004e34 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d128      	bne.n	8004e34 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	3304      	adds	r3, #4
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe fca0 	bl	800372c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <xTaskPriorityDisinherit+0xd0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d903      	bls.n	8004e14 <xTaskPriorityDisinherit+0xa0>
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	4a0c      	ldr	r2, [pc, #48]	; (8004e44 <xTaskPriorityDisinherit+0xd0>)
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4a09      	ldr	r2, [pc, #36]	; (8004e48 <xTaskPriorityDisinherit+0xd4>)
 8004e22:	441a      	add	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f7fe fc21 	bl	8003672 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e34:	697b      	ldr	r3, [r7, #20]
	}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000750 	.word	0x20000750
 8004e44:	20000c2c 	.word	0x20000c2c
 8004e48:	20000754 	.word	0x20000754

08004e4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e56:	4b21      	ldr	r3, [pc, #132]	; (8004edc <prvAddCurrentTaskToDelayedList+0x90>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e5c:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3304      	adds	r3, #4
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe fc62 	bl	800372c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6e:	d10a      	bne.n	8004e86 <prvAddCurrentTaskToDelayedList+0x3a>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d007      	beq.n	8004e86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e76:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4819      	ldr	r0, [pc, #100]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e80:	f7fe fbf7 	bl	8003672 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e84:	e026      	b.n	8004ed4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d209      	bcs.n	8004eb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e9e:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f7fe fc05 	bl	80036ba <vListInsert>
}
 8004eb0:	e010      	b.n	8004ed4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eb2:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <prvAddCurrentTaskToDelayedList+0xa0>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f7fe fbfb 	bl	80036ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ec4:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d202      	bcs.n	8004ed4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ece:	4a08      	ldr	r2, [pc, #32]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	6013      	str	r3, [r2, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000c28 	.word	0x20000c28
 8004ee0:	20000750 	.word	0x20000750
 8004ee4:	20000c10 	.word	0x20000c10
 8004ee8:	20000be0 	.word	0x20000be0
 8004eec:	20000bdc 	.word	0x20000bdc
 8004ef0:	20000c44 	.word	0x20000c44

08004ef4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	; 0x28
 8004ef8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004efe:	f000 faff 	bl	8005500 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f02:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <xTimerCreateTimerTask+0x80>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d021      	beq.n	8004f4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f12:	1d3a      	adds	r2, r7, #4
 8004f14:	f107 0108 	add.w	r1, r7, #8
 8004f18:	f107 030c 	add.w	r3, r7, #12
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fe fb61 	bl	80035e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	9202      	str	r2, [sp, #8]
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	2300      	movs	r3, #0
 8004f32:	460a      	mov	r2, r1
 8004f34:	4910      	ldr	r1, [pc, #64]	; (8004f78 <xTimerCreateTimerTask+0x84>)
 8004f36:	4811      	ldr	r0, [pc, #68]	; (8004f7c <xTimerCreateTimerTask+0x88>)
 8004f38:	f7ff f8f6 	bl	8004128 <xTaskCreateStatic>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <xTimerCreateTimerTask+0x8c>)
 8004f40:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <xTimerCreateTimerTask+0x8c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d109      	bne.n	8004f68 <xTimerCreateTimerTask+0x74>
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e7fe      	b.n	8004f66 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004f68:	697b      	ldr	r3, [r7, #20]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000c80 	.word	0x20000c80
 8004f78:	08006688 	.word	0x08006688
 8004f7c:	080050b5 	.word	0x080050b5
 8004f80:	20000c84 	.word	0x20000c84

08004f84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	; 0x28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <xTimerGenericCommand+0x2c>
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	e7fe      	b.n	8004fae <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fb0:	4b19      	ldr	r3, [pc, #100]	; (8005018 <xTimerGenericCommand+0x94>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d02a      	beq.n	800500e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b05      	cmp	r3, #5
 8004fc8:	dc18      	bgt.n	8004ffc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fca:	f7ff feb5 	bl	8004d38 <xTaskGetSchedulerState>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d109      	bne.n	8004fe8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <xTimerGenericCommand+0x94>)
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	f107 0110 	add.w	r1, r7, #16
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe0:	f7fe fccc 	bl	800397c <xQueueGenericSend>
 8004fe4:	6278      	str	r0, [r7, #36]	; 0x24
 8004fe6:	e012      	b.n	800500e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <xTimerGenericCommand+0x94>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	f107 0110 	add.w	r1, r7, #16
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f7fe fcc2 	bl	800397c <xQueueGenericSend>
 8004ff8:	6278      	str	r0, [r7, #36]	; 0x24
 8004ffa:	e008      	b.n	800500e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <xTimerGenericCommand+0x94>)
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	f107 0110 	add.w	r1, r7, #16
 8005004:	2300      	movs	r3, #0
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	f7fe fdb2 	bl	8003b70 <xQueueGenericSendFromISR>
 800500c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005010:	4618      	mov	r0, r3
 8005012:	3728      	adds	r7, #40	; 0x28
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	20000c80 	.word	0x20000c80

0800501c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af02      	add	r7, sp, #8
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005026:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <prvProcessExpiredTimer+0x94>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3304      	adds	r3, #4
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe fb79 	bl	800372c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d021      	beq.n	800508c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	699a      	ldr	r2, [r3, #24]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	18d1      	adds	r1, r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	6978      	ldr	r0, [r7, #20]
 8005056:	f000 f8d1 	bl	80051fc <prvInsertTimerInActiveList>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01e      	beq.n	800509e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005060:	2300      	movs	r3, #0
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	2300      	movs	r3, #0
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	2100      	movs	r1, #0
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f7ff ff8a 	bl	8004f84 <xTimerGenericCommand>
 8005070:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d112      	bne.n	800509e <prvProcessExpiredTimer+0x82>
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e7fe      	b.n	800508a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005092:	f023 0301 	bic.w	r3, r3, #1
 8005096:	b2da      	uxtb	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	6978      	ldr	r0, [r7, #20]
 80050a4:	4798      	blx	r3
}
 80050a6:	bf00      	nop
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000c78 	.word	0x20000c78

080050b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050bc:	f107 0308 	add.w	r3, r7, #8
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 f857 	bl	8005174 <prvGetNextExpireTime>
 80050c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4619      	mov	r1, r3
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f803 	bl	80050d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050d2:	f000 f8d5 	bl	8005280 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050d6:	e7f1      	b.n	80050bc <prvTimerTask+0x8>

080050d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050e2:	f7ff fa57 	bl	8004594 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050e6:	f107 0308 	add.w	r3, r7, #8
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 f866 	bl	80051bc <prvSampleTimeNow>
 80050f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d130      	bne.n	800515a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <prvProcessTimerOrBlockTask+0x3c>
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	429a      	cmp	r2, r3
 8005104:	d806      	bhi.n	8005114 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005106:	f7ff fa53 	bl	80045b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800510a:	68f9      	ldr	r1, [r7, #12]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff ff85 	bl	800501c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005112:	e024      	b.n	800515e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800511a:	4b13      	ldr	r3, [pc, #76]	; (8005168 <prvProcessTimerOrBlockTask+0x90>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <prvProcessTimerOrBlockTask+0x50>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <prvProcessTimerOrBlockTask+0x52>
 8005128:	2300      	movs	r3, #0
 800512a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <prvProcessTimerOrBlockTask+0x94>)
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	4619      	mov	r1, r3
 800513a:	f7fe ffc1 	bl	80040c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800513e:	f7ff fa37 	bl	80045b0 <xTaskResumeAll>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005148:	4b09      	ldr	r3, [pc, #36]	; (8005170 <prvProcessTimerOrBlockTask+0x98>)
 800514a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	f3bf 8f6f 	isb	sy
}
 8005158:	e001      	b.n	800515e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800515a:	f7ff fa29 	bl	80045b0 <xTaskResumeAll>
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000c7c 	.word	0x20000c7c
 800516c:	20000c80 	.word	0x20000c80
 8005170:	e000ed04 	.word	0xe000ed04

08005174 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800517c:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <prvGetNextExpireTime+0x44>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <prvGetNextExpireTime+0x16>
 8005186:	2201      	movs	r2, #1
 8005188:	e000      	b.n	800518c <prvGetNextExpireTime+0x18>
 800518a:	2200      	movs	r2, #0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d105      	bne.n	80051a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005198:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <prvGetNextExpireTime+0x44>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	e001      	b.n	80051a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051a8:	68fb      	ldr	r3, [r7, #12]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000c78 	.word	0x20000c78

080051bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051c4:	f7ff fa90 	bl	80046e8 <xTaskGetTickCount>
 80051c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <prvSampleTimeNow+0x3c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d205      	bcs.n	80051e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051d4:	f000 f930 	bl	8005438 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	e002      	b.n	80051e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051e6:	4a04      	ldr	r2, [pc, #16]	; (80051f8 <prvSampleTimeNow+0x3c>)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051ec:	68fb      	ldr	r3, [r7, #12]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000c88 	.word	0x20000c88

080051fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	429a      	cmp	r2, r3
 8005220:	d812      	bhi.n	8005248 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	1ad2      	subs	r2, r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	429a      	cmp	r2, r3
 800522e:	d302      	bcc.n	8005236 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005230:	2301      	movs	r3, #1
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	e01b      	b.n	800526e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005236:	4b10      	ldr	r3, [pc, #64]	; (8005278 <prvInsertTimerInActiveList+0x7c>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3304      	adds	r3, #4
 800523e:	4619      	mov	r1, r3
 8005240:	4610      	mov	r0, r2
 8005242:	f7fe fa3a 	bl	80036ba <vListInsert>
 8005246:	e012      	b.n	800526e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d206      	bcs.n	800525e <prvInsertTimerInActiveList+0x62>
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d302      	bcc.n	800525e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e007      	b.n	800526e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800525e:	4b07      	ldr	r3, [pc, #28]	; (800527c <prvInsertTimerInActiveList+0x80>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3304      	adds	r3, #4
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f7fe fa26 	bl	80036ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800526e:	697b      	ldr	r3, [r7, #20]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000c7c 	.word	0x20000c7c
 800527c:	20000c78 	.word	0x20000c78

08005280 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08e      	sub	sp, #56	; 0x38
 8005284:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005286:	e0c6      	b.n	8005416 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	da17      	bge.n	80052be <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800528e:	1d3b      	adds	r3, r7, #4
 8005290:	3304      	adds	r3, #4
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <prvProcessReceivedCommands+0x2e>
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	e7fe      	b.n	80052ac <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b4:	6850      	ldr	r0, [r2, #4]
 80052b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b8:	6892      	ldr	r2, [r2, #8]
 80052ba:	4611      	mov	r1, r2
 80052bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f2c0 80a7 	blt.w	8005414 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d004      	beq.n	80052dc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	3304      	adds	r3, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fe fa28 	bl	800372c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052dc:	463b      	mov	r3, r7
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff ff6c 	bl	80051bc <prvSampleTimeNow>
 80052e4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b09      	cmp	r3, #9
 80052ea:	f200 8094 	bhi.w	8005416 <prvProcessReceivedCommands+0x196>
 80052ee:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <prvProcessReceivedCommands+0x74>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	0800531d 	.word	0x0800531d
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	0800531d 	.word	0x0800531d
 8005300:	0800538f 	.word	0x0800538f
 8005304:	080053a3 	.word	0x080053a3
 8005308:	080053eb 	.word	0x080053eb
 800530c:	0800531d 	.word	0x0800531d
 8005310:	0800531d 	.word	0x0800531d
 8005314:	0800538f 	.word	0x0800538f
 8005318:	080053a3 	.word	0x080053a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005322:	f043 0301 	orr.w	r3, r3, #1
 8005326:	b2da      	uxtb	r2, r3
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	18d1      	adds	r1, r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800533c:	f7ff ff5e 	bl	80051fc <prvInsertTimerInActiveList>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d067      	beq.n	8005416 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d05c      	beq.n	8005416 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	441a      	add	r2, r3
 8005364:	2300      	movs	r3, #0
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	2300      	movs	r3, #0
 800536a:	2100      	movs	r1, #0
 800536c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800536e:	f7ff fe09 	bl	8004f84 <xTimerGenericCommand>
 8005372:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d14d      	bne.n	8005416 <prvProcessReceivedCommands+0x196>
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	e7fe      	b.n	800538c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	b2da      	uxtb	r2, r3
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80053a0:	e039      	b.n	8005416 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <prvProcessReceivedCommands+0x156>
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e7fe      	b.n	80053d4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	18d1      	adds	r1, r2, r3
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053e4:	f7ff ff0a 	bl	80051fc <prvInsertTimerInActiveList>
					break;
 80053e8:	e015      	b.n	8005416 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80053f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053fa:	f000 fbc3 	bl	8005b84 <vPortFree>
 80053fe:	e00a      	b.n	8005416 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	b2da      	uxtb	r2, r3
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005412:	e000      	b.n	8005416 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005414:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005416:	4b07      	ldr	r3, [pc, #28]	; (8005434 <prvProcessReceivedCommands+0x1b4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	1d39      	adds	r1, r7, #4
 800541c:	2200      	movs	r2, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fc3a 	bl	8003c98 <xQueueReceive>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	f47f af2e 	bne.w	8005288 <prvProcessReceivedCommands+0x8>
	}
}
 800542c:	bf00      	nop
 800542e:	3730      	adds	r7, #48	; 0x30
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000c80 	.word	0x20000c80

08005438 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800543e:	e047      	b.n	80054d0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005440:	4b2d      	ldr	r3, [pc, #180]	; (80054f8 <prvSwitchTimerLists+0xc0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544a:	4b2b      	ldr	r3, [pc, #172]	; (80054f8 <prvSwitchTimerLists+0xc0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3304      	adds	r3, #4
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe f967 	bl	800372c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d02d      	beq.n	80054d0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4413      	add	r3, r2
 800547c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	429a      	cmp	r2, r3
 8005484:	d90e      	bls.n	80054a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005492:	4b19      	ldr	r3, [pc, #100]	; (80054f8 <prvSwitchTimerLists+0xc0>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3304      	adds	r3, #4
 800549a:	4619      	mov	r1, r3
 800549c:	4610      	mov	r0, r2
 800549e:	f7fe f90c 	bl	80036ba <vListInsert>
 80054a2:	e015      	b.n	80054d0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054a4:	2300      	movs	r3, #0
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	2300      	movs	r3, #0
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	2100      	movs	r1, #0
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7ff fd68 	bl	8004f84 <xTimerGenericCommand>
 80054b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d109      	bne.n	80054d0 <prvSwitchTimerLists+0x98>
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	e7fe      	b.n	80054ce <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054d0:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <prvSwitchTimerLists+0xc0>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1b2      	bne.n	8005440 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054da:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <prvSwitchTimerLists+0xc0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <prvSwitchTimerLists+0xc4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a04      	ldr	r2, [pc, #16]	; (80054f8 <prvSwitchTimerLists+0xc0>)
 80054e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054e8:	4a04      	ldr	r2, [pc, #16]	; (80054fc <prvSwitchTimerLists+0xc4>)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	6013      	str	r3, [r2, #0]
}
 80054ee:	bf00      	nop
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20000c78 	.word	0x20000c78
 80054fc:	20000c7c 	.word	0x20000c7c

08005500 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005506:	f000 f961 	bl	80057cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800550a:	4b15      	ldr	r3, [pc, #84]	; (8005560 <prvCheckForValidListAndQueue+0x60>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d120      	bne.n	8005554 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005512:	4814      	ldr	r0, [pc, #80]	; (8005564 <prvCheckForValidListAndQueue+0x64>)
 8005514:	f7fe f880 	bl	8003618 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005518:	4813      	ldr	r0, [pc, #76]	; (8005568 <prvCheckForValidListAndQueue+0x68>)
 800551a:	f7fe f87d 	bl	8003618 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800551e:	4b13      	ldr	r3, [pc, #76]	; (800556c <prvCheckForValidListAndQueue+0x6c>)
 8005520:	4a10      	ldr	r2, [pc, #64]	; (8005564 <prvCheckForValidListAndQueue+0x64>)
 8005522:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005524:	4b12      	ldr	r3, [pc, #72]	; (8005570 <prvCheckForValidListAndQueue+0x70>)
 8005526:	4a10      	ldr	r2, [pc, #64]	; (8005568 <prvCheckForValidListAndQueue+0x68>)
 8005528:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800552a:	2300      	movs	r3, #0
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	4b11      	ldr	r3, [pc, #68]	; (8005574 <prvCheckForValidListAndQueue+0x74>)
 8005530:	4a11      	ldr	r2, [pc, #68]	; (8005578 <prvCheckForValidListAndQueue+0x78>)
 8005532:	2110      	movs	r1, #16
 8005534:	200a      	movs	r0, #10
 8005536:	f7fe f98b 	bl	8003850 <xQueueGenericCreateStatic>
 800553a:	4602      	mov	r2, r0
 800553c:	4b08      	ldr	r3, [pc, #32]	; (8005560 <prvCheckForValidListAndQueue+0x60>)
 800553e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005540:	4b07      	ldr	r3, [pc, #28]	; (8005560 <prvCheckForValidListAndQueue+0x60>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005548:	4b05      	ldr	r3, [pc, #20]	; (8005560 <prvCheckForValidListAndQueue+0x60>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	490b      	ldr	r1, [pc, #44]	; (800557c <prvCheckForValidListAndQueue+0x7c>)
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe fd8e 	bl	8004070 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005554:	f000 f968 	bl	8005828 <vPortExitCritical>
}
 8005558:	bf00      	nop
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20000c80 	.word	0x20000c80
 8005564:	20000c50 	.word	0x20000c50
 8005568:	20000c64 	.word	0x20000c64
 800556c:	20000c78 	.word	0x20000c78
 8005570:	20000c7c 	.word	0x20000c7c
 8005574:	20000d2c 	.word	0x20000d2c
 8005578:	20000c8c 	.word	0x20000c8c
 800557c:	08006690 	.word	0x08006690

08005580 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3b04      	subs	r3, #4
 8005590:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3b04      	subs	r3, #4
 800559e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f023 0201 	bic.w	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3b04      	subs	r3, #4
 80055ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055b0:	4a0c      	ldr	r2, [pc, #48]	; (80055e4 <pxPortInitialiseStack+0x64>)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3b14      	subs	r3, #20
 80055ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3b04      	subs	r3, #4
 80055c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f06f 0202 	mvn.w	r2, #2
 80055ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3b20      	subs	r3, #32
 80055d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055d6:	68fb      	ldr	r3, [r7, #12]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	080055e9 	.word	0x080055e9

080055e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055f2:	4b11      	ldr	r3, [pc, #68]	; (8005638 <prvTaskExitError+0x50>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d009      	beq.n	8005610 <prvTaskExitError+0x28>
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e7fe      	b.n	800560e <prvTaskExitError+0x26>
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005622:	bf00      	nop
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0fc      	beq.n	8005624 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	2000000c 	.word	0x2000000c
 800563c:	00000000 	.word	0x00000000

08005640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005640:	4b07      	ldr	r3, [pc, #28]	; (8005660 <pxCurrentTCBConst2>)
 8005642:	6819      	ldr	r1, [r3, #0]
 8005644:	6808      	ldr	r0, [r1, #0]
 8005646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564a:	f380 8809 	msr	PSP, r0
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f380 8811 	msr	BASEPRI, r0
 800565a:	4770      	bx	lr
 800565c:	f3af 8000 	nop.w

08005660 <pxCurrentTCBConst2>:
 8005660:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop

08005668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005668:	4808      	ldr	r0, [pc, #32]	; (800568c <prvPortStartFirstTask+0x24>)
 800566a:	6800      	ldr	r0, [r0, #0]
 800566c:	6800      	ldr	r0, [r0, #0]
 800566e:	f380 8808 	msr	MSP, r0
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f380 8814 	msr	CONTROL, r0
 800567a:	b662      	cpsie	i
 800567c:	b661      	cpsie	f
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	df00      	svc	0
 8005688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800568a:	bf00      	nop
 800568c:	e000ed08 	.word	0xe000ed08

08005690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005696:	4b44      	ldr	r3, [pc, #272]	; (80057a8 <xPortStartScheduler+0x118>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a44      	ldr	r2, [pc, #272]	; (80057ac <xPortStartScheduler+0x11c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d109      	bne.n	80056b4 <xPortStartScheduler+0x24>
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	e7fe      	b.n	80056b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056b4:	4b3c      	ldr	r3, [pc, #240]	; (80057a8 <xPortStartScheduler+0x118>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a3d      	ldr	r2, [pc, #244]	; (80057b0 <xPortStartScheduler+0x120>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d109      	bne.n	80056d2 <xPortStartScheduler+0x42>
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	e7fe      	b.n	80056d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056d2:	4b38      	ldr	r3, [pc, #224]	; (80057b4 <xPortStartScheduler+0x124>)
 80056d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	22ff      	movs	r2, #255	; 0xff
 80056e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	4b30      	ldr	r3, [pc, #192]	; (80057b8 <xPortStartScheduler+0x128>)
 80056f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056fa:	4b30      	ldr	r3, [pc, #192]	; (80057bc <xPortStartScheduler+0x12c>)
 80056fc:	2207      	movs	r2, #7
 80056fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005700:	e009      	b.n	8005716 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005702:	4b2e      	ldr	r3, [pc, #184]	; (80057bc <xPortStartScheduler+0x12c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3b01      	subs	r3, #1
 8005708:	4a2c      	ldr	r2, [pc, #176]	; (80057bc <xPortStartScheduler+0x12c>)
 800570a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	b2db      	uxtb	r3, r3
 8005714:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	d0ef      	beq.n	8005702 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005722:	4b26      	ldr	r3, [pc, #152]	; (80057bc <xPortStartScheduler+0x12c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f1c3 0307 	rsb	r3, r3, #7
 800572a:	2b04      	cmp	r3, #4
 800572c:	d009      	beq.n	8005742 <xPortStartScheduler+0xb2>
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	60bb      	str	r3, [r7, #8]
 8005740:	e7fe      	b.n	8005740 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005742:	4b1e      	ldr	r3, [pc, #120]	; (80057bc <xPortStartScheduler+0x12c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <xPortStartScheduler+0x12c>)
 800574a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800574c:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <xPortStartScheduler+0x12c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005754:	4a19      	ldr	r2, [pc, #100]	; (80057bc <xPortStartScheduler+0x12c>)
 8005756:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	b2da      	uxtb	r2, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005760:	4b17      	ldr	r3, [pc, #92]	; (80057c0 <xPortStartScheduler+0x130>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a16      	ldr	r2, [pc, #88]	; (80057c0 <xPortStartScheduler+0x130>)
 8005766:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800576a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800576c:	4b14      	ldr	r3, [pc, #80]	; (80057c0 <xPortStartScheduler+0x130>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a13      	ldr	r2, [pc, #76]	; (80057c0 <xPortStartScheduler+0x130>)
 8005772:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005776:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005778:	f000 f8d6 	bl	8005928 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800577c:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <xPortStartScheduler+0x134>)
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005782:	f000 f8f5 	bl	8005970 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <xPortStartScheduler+0x138>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a0f      	ldr	r2, [pc, #60]	; (80057c8 <xPortStartScheduler+0x138>)
 800578c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005790:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005792:	f7ff ff69 	bl	8005668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005796:	f7ff f86f 	bl	8004878 <vTaskSwitchContext>
	prvTaskExitError();
 800579a:	f7ff ff25 	bl	80055e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	e000ed00 	.word	0xe000ed00
 80057ac:	410fc271 	.word	0x410fc271
 80057b0:	410fc270 	.word	0x410fc270
 80057b4:	e000e400 	.word	0xe000e400
 80057b8:	20000d7c 	.word	0x20000d7c
 80057bc:	20000d80 	.word	0x20000d80
 80057c0:	e000ed20 	.word	0xe000ed20
 80057c4:	2000000c 	.word	0x2000000c
 80057c8:	e000ef34 	.word	0xe000ef34

080057cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057e4:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <vPortEnterCritical+0x54>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3301      	adds	r3, #1
 80057ea:	4a0d      	ldr	r2, [pc, #52]	; (8005820 <vPortEnterCritical+0x54>)
 80057ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057ee:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <vPortEnterCritical+0x54>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d10e      	bne.n	8005814 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057f6:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <vPortEnterCritical+0x58>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d009      	beq.n	8005814 <vPortEnterCritical+0x48>
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	e7fe      	b.n	8005812 <vPortEnterCritical+0x46>
	}
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	2000000c 	.word	0x2000000c
 8005824:	e000ed04 	.word	0xe000ed04

08005828 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800582e:	4b11      	ldr	r3, [pc, #68]	; (8005874 <vPortExitCritical+0x4c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <vPortExitCritical+0x22>
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	607b      	str	r3, [r7, #4]
 8005848:	e7fe      	b.n	8005848 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <vPortExitCritical+0x4c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3b01      	subs	r3, #1
 8005850:	4a08      	ldr	r2, [pc, #32]	; (8005874 <vPortExitCritical+0x4c>)
 8005852:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005854:	4b07      	ldr	r3, [pc, #28]	; (8005874 <vPortExitCritical+0x4c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d104      	bne.n	8005866 <vPortExitCritical+0x3e>
 800585c:	2300      	movs	r3, #0
 800585e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	2000000c 	.word	0x2000000c
	...

08005880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005880:	f3ef 8009 	mrs	r0, PSP
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <pxCurrentTCBConst>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	f01e 0f10 	tst.w	lr, #16
 8005890:	bf08      	it	eq
 8005892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	6010      	str	r0, [r2, #0]
 800589c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058a4:	f380 8811 	msr	BASEPRI, r0
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f7fe ffe2 	bl	8004878 <vTaskSwitchContext>
 80058b4:	f04f 0000 	mov.w	r0, #0
 80058b8:	f380 8811 	msr	BASEPRI, r0
 80058bc:	bc09      	pop	{r0, r3}
 80058be:	6819      	ldr	r1, [r3, #0]
 80058c0:	6808      	ldr	r0, [r1, #0]
 80058c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c6:	f01e 0f10 	tst.w	lr, #16
 80058ca:	bf08      	it	eq
 80058cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058d0:	f380 8809 	msr	PSP, r0
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	f3af 8000 	nop.w

080058e0 <pxCurrentTCBConst>:
 80058e0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop

080058e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005900:	f7fe ff02 	bl	8004708 <xTaskIncrementTick>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800590a:	4b06      	ldr	r3, [pc, #24]	; (8005924 <xPortSysTickHandler+0x3c>)
 800590c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	2300      	movs	r3, #0
 8005914:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	e000ed04 	.word	0xe000ed04

08005928 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800592c:	4b0b      	ldr	r3, [pc, #44]	; (800595c <vPortSetupTimerInterrupt+0x34>)
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005932:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <vPortSetupTimerInterrupt+0x38>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005938:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <vPortSetupTimerInterrupt+0x3c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a0a      	ldr	r2, [pc, #40]	; (8005968 <vPortSetupTimerInterrupt+0x40>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	099b      	lsrs	r3, r3, #6
 8005944:	4a09      	ldr	r2, [pc, #36]	; (800596c <vPortSetupTimerInterrupt+0x44>)
 8005946:	3b01      	subs	r3, #1
 8005948:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800594a:	4b04      	ldr	r3, [pc, #16]	; (800595c <vPortSetupTimerInterrupt+0x34>)
 800594c:	2207      	movs	r2, #7
 800594e:	601a      	str	r2, [r3, #0]
}
 8005950:	bf00      	nop
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	e000e010 	.word	0xe000e010
 8005960:	e000e018 	.word	0xe000e018
 8005964:	20000000 	.word	0x20000000
 8005968:	10624dd3 	.word	0x10624dd3
 800596c:	e000e014 	.word	0xe000e014

08005970 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005970:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005980 <vPortEnableVFP+0x10>
 8005974:	6801      	ldr	r1, [r0, #0]
 8005976:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800597a:	6001      	str	r1, [r0, #0]
 800597c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800597e:	bf00      	nop
 8005980:	e000ed88 	.word	0xe000ed88

08005984 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800598a:	f3ef 8305 	mrs	r3, IPSR
 800598e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b0f      	cmp	r3, #15
 8005994:	d913      	bls.n	80059be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005996:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <vPortValidateInterruptPriority+0x6c>)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059a0:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <vPortValidateInterruptPriority+0x70>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	7afa      	ldrb	r2, [r7, #11]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d209      	bcs.n	80059be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	607b      	str	r3, [r7, #4]
 80059bc:	e7fe      	b.n	80059bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059be:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <vPortValidateInterruptPriority+0x74>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059c6:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <vPortValidateInterruptPriority+0x78>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d909      	bls.n	80059e2 <vPortValidateInterruptPriority+0x5e>
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	e7fe      	b.n	80059e0 <vPortValidateInterruptPriority+0x5c>
	}
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	e000e3f0 	.word	0xe000e3f0
 80059f4:	20000d7c 	.word	0x20000d7c
 80059f8:	e000ed0c 	.word	0xe000ed0c
 80059fc:	20000d80 	.word	0x20000d80

08005a00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	; 0x28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a0c:	f7fe fdc2 	bl	8004594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a10:	4b57      	ldr	r3, [pc, #348]	; (8005b70 <pvPortMalloc+0x170>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a18:	f000 f90c 	bl	8005c34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a1c:	4b55      	ldr	r3, [pc, #340]	; (8005b74 <pvPortMalloc+0x174>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f040 808c 	bne.w	8005b42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01c      	beq.n	8005a6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005a30:	2208      	movs	r2, #8
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4413      	add	r3, r2
 8005a36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d013      	beq.n	8005a6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f023 0307 	bic.w	r3, r3, #7
 8005a48:	3308      	adds	r3, #8
 8005a4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <pvPortMalloc+0x6a>
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	e7fe      	b.n	8005a68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d068      	beq.n	8005b42 <pvPortMalloc+0x142>
 8005a70:	4b41      	ldr	r3, [pc, #260]	; (8005b78 <pvPortMalloc+0x178>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d863      	bhi.n	8005b42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a7a:	4b40      	ldr	r3, [pc, #256]	; (8005b7c <pvPortMalloc+0x17c>)
 8005a7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a7e:	4b3f      	ldr	r3, [pc, #252]	; (8005b7c <pvPortMalloc+0x17c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a84:	e004      	b.n	8005a90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d903      	bls.n	8005aa2 <pvPortMalloc+0xa2>
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f1      	bne.n	8005a86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005aa2:	4b33      	ldr	r3, [pc, #204]	; (8005b70 <pvPortMalloc+0x170>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d04a      	beq.n	8005b42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	4413      	add	r3, r2
 8005ab4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	1ad2      	subs	r2, r2, r3
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d91e      	bls.n	8005b0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <pvPortMalloc+0xf4>
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e7fe      	b.n	8005af2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	1ad2      	subs	r2, r2, r3
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b06:	69b8      	ldr	r0, [r7, #24]
 8005b08:	f000 f8f6 	bl	8005cf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b0c:	4b1a      	ldr	r3, [pc, #104]	; (8005b78 <pvPortMalloc+0x178>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	4a18      	ldr	r2, [pc, #96]	; (8005b78 <pvPortMalloc+0x178>)
 8005b18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b1a:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <pvPortMalloc+0x178>)
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b18      	ldr	r3, [pc, #96]	; (8005b80 <pvPortMalloc+0x180>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d203      	bcs.n	8005b2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <pvPortMalloc+0x178>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a15      	ldr	r2, [pc, #84]	; (8005b80 <pvPortMalloc+0x180>)
 8005b2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	4b10      	ldr	r3, [pc, #64]	; (8005b74 <pvPortMalloc+0x174>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b42:	f7fe fd35 	bl	80045b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <pvPortMalloc+0x164>
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e7fe      	b.n	8005b62 <pvPortMalloc+0x162>
	return pvReturn;
 8005b64:	69fb      	ldr	r3, [r7, #28]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3728      	adds	r7, #40	; 0x28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	2000498c 	.word	0x2000498c
 8005b74:	20004998 	.word	0x20004998
 8005b78:	20004990 	.word	0x20004990
 8005b7c:	20004984 	.word	0x20004984
 8005b80:	20004994 	.word	0x20004994

08005b84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d046      	beq.n	8005c24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b96:	2308      	movs	r3, #8
 8005b98:	425b      	negs	r3, r3
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	4b20      	ldr	r3, [pc, #128]	; (8005c2c <vPortFree+0xa8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d109      	bne.n	8005bc6 <vPortFree+0x42>
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e7fe      	b.n	8005bc4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <vPortFree+0x5e>
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	60bb      	str	r3, [r7, #8]
 8005be0:	e7fe      	b.n	8005be0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <vPortFree+0xa8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d019      	beq.n	8005c24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d115      	bne.n	8005c24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <vPortFree+0xa8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	43db      	mvns	r3, r3
 8005c02:	401a      	ands	r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c08:	f7fe fcc4 	bl	8004594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <vPortFree+0xac>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4413      	add	r3, r2
 8005c16:	4a06      	ldr	r2, [pc, #24]	; (8005c30 <vPortFree+0xac>)
 8005c18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c1a:	6938      	ldr	r0, [r7, #16]
 8005c1c:	f000 f86c 	bl	8005cf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c20:	f7fe fcc6 	bl	80045b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c24:	bf00      	nop
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20004998 	.word	0x20004998
 8005c30:	20004990 	.word	0x20004990

08005c34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c40:	4b27      	ldr	r3, [pc, #156]	; (8005ce0 <prvHeapInit+0xac>)
 8005c42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00c      	beq.n	8005c68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3307      	adds	r3, #7
 8005c52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0307 	bic.w	r3, r3, #7
 8005c5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <prvHeapInit+0xac>)
 8005c64:	4413      	add	r3, r2
 8005c66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ce4 <prvHeapInit+0xb0>)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c72:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <prvHeapInit+0xb0>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c80:	2208      	movs	r2, #8
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0307 	bic.w	r3, r3, #7
 8005c8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <prvHeapInit+0xb4>)
 8005c94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c96:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <prvHeapInit+0xb4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <prvHeapInit+0xb4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	1ad2      	subs	r2, r2, r3
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <prvHeapInit+0xb4>)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <prvHeapInit+0xb8>)
 8005cc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <prvHeapInit+0xbc>)
 8005cca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <prvHeapInit+0xc0>)
 8005cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cd2:	601a      	str	r2, [r3, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20000d84 	.word	0x20000d84
 8005ce4:	20004984 	.word	0x20004984
 8005ce8:	2000498c 	.word	0x2000498c
 8005cec:	20004994 	.word	0x20004994
 8005cf0:	20004990 	.word	0x20004990
 8005cf4:	20004998 	.word	0x20004998

08005cf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d00:	4b28      	ldr	r3, [pc, #160]	; (8005da4 <prvInsertBlockIntoFreeList+0xac>)
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e002      	b.n	8005d0c <prvInsertBlockIntoFreeList+0x14>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d8f7      	bhi.n	8005d06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	4413      	add	r3, r2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d108      	bne.n	8005d3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	441a      	add	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	441a      	add	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d118      	bne.n	8005d80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b15      	ldr	r3, [pc, #84]	; (8005da8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d00d      	beq.n	8005d76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	441a      	add	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e008      	b.n	8005d88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e003      	b.n	8005d88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d002      	beq.n	8005d96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	20004984 	.word	0x20004984
 8005da8:	2000498c 	.word	0x2000498c

08005dac <__errno>:
 8005dac:	4b01      	ldr	r3, [pc, #4]	; (8005db4 <__errno+0x8>)
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20000010 	.word	0x20000010

08005db8 <__libc_init_array>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	4e0d      	ldr	r6, [pc, #52]	; (8005df0 <__libc_init_array+0x38>)
 8005dbc:	4c0d      	ldr	r4, [pc, #52]	; (8005df4 <__libc_init_array+0x3c>)
 8005dbe:	1ba4      	subs	r4, r4, r6
 8005dc0:	10a4      	asrs	r4, r4, #2
 8005dc2:	2500      	movs	r5, #0
 8005dc4:	42a5      	cmp	r5, r4
 8005dc6:	d109      	bne.n	8005ddc <__libc_init_array+0x24>
 8005dc8:	4e0b      	ldr	r6, [pc, #44]	; (8005df8 <__libc_init_array+0x40>)
 8005dca:	4c0c      	ldr	r4, [pc, #48]	; (8005dfc <__libc_init_array+0x44>)
 8005dcc:	f000 fc28 	bl	8006620 <_init>
 8005dd0:	1ba4      	subs	r4, r4, r6
 8005dd2:	10a4      	asrs	r4, r4, #2
 8005dd4:	2500      	movs	r5, #0
 8005dd6:	42a5      	cmp	r5, r4
 8005dd8:	d105      	bne.n	8005de6 <__libc_init_array+0x2e>
 8005dda:	bd70      	pop	{r4, r5, r6, pc}
 8005ddc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005de0:	4798      	blx	r3
 8005de2:	3501      	adds	r5, #1
 8005de4:	e7ee      	b.n	8005dc4 <__libc_init_array+0xc>
 8005de6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dea:	4798      	blx	r3
 8005dec:	3501      	adds	r5, #1
 8005dee:	e7f2      	b.n	8005dd6 <__libc_init_array+0x1e>
 8005df0:	080067c4 	.word	0x080067c4
 8005df4:	080067c4 	.word	0x080067c4
 8005df8:	080067c4 	.word	0x080067c4
 8005dfc:	080067c8 	.word	0x080067c8

08005e00 <memcpy>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	1e43      	subs	r3, r0, #1
 8005e04:	440a      	add	r2, r1
 8005e06:	4291      	cmp	r1, r2
 8005e08:	d100      	bne.n	8005e0c <memcpy+0xc>
 8005e0a:	bd10      	pop	{r4, pc}
 8005e0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e14:	e7f7      	b.n	8005e06 <memcpy+0x6>

08005e16 <memset>:
 8005e16:	4402      	add	r2, r0
 8005e18:	4603      	mov	r3, r0
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d100      	bne.n	8005e20 <memset+0xa>
 8005e1e:	4770      	bx	lr
 8005e20:	f803 1b01 	strb.w	r1, [r3], #1
 8005e24:	e7f9      	b.n	8005e1a <memset+0x4>
	...

08005e28 <siprintf>:
 8005e28:	b40e      	push	{r1, r2, r3}
 8005e2a:	b500      	push	{lr}
 8005e2c:	b09c      	sub	sp, #112	; 0x70
 8005e2e:	ab1d      	add	r3, sp, #116	; 0x74
 8005e30:	9002      	str	r0, [sp, #8]
 8005e32:	9006      	str	r0, [sp, #24]
 8005e34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e38:	4809      	ldr	r0, [pc, #36]	; (8005e60 <siprintf+0x38>)
 8005e3a:	9107      	str	r1, [sp, #28]
 8005e3c:	9104      	str	r1, [sp, #16]
 8005e3e:	4909      	ldr	r1, [pc, #36]	; (8005e64 <siprintf+0x3c>)
 8005e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e44:	9105      	str	r1, [sp, #20]
 8005e46:	6800      	ldr	r0, [r0, #0]
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	a902      	add	r1, sp, #8
 8005e4c:	f000 f866 	bl	8005f1c <_svfiprintf_r>
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	b01c      	add	sp, #112	; 0x70
 8005e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e5c:	b003      	add	sp, #12
 8005e5e:	4770      	bx	lr
 8005e60:	20000010 	.word	0x20000010
 8005e64:	ffff0208 	.word	0xffff0208

08005e68 <__ssputs_r>:
 8005e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6c:	688e      	ldr	r6, [r1, #8]
 8005e6e:	429e      	cmp	r6, r3
 8005e70:	4682      	mov	sl, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	4690      	mov	r8, r2
 8005e76:	4699      	mov	r9, r3
 8005e78:	d837      	bhi.n	8005eea <__ssputs_r+0x82>
 8005e7a:	898a      	ldrh	r2, [r1, #12]
 8005e7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e80:	d031      	beq.n	8005ee6 <__ssputs_r+0x7e>
 8005e82:	6825      	ldr	r5, [r4, #0]
 8005e84:	6909      	ldr	r1, [r1, #16]
 8005e86:	1a6f      	subs	r7, r5, r1
 8005e88:	6965      	ldr	r5, [r4, #20]
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e90:	fb95 f5f3 	sdiv	r5, r5, r3
 8005e94:	f109 0301 	add.w	r3, r9, #1
 8005e98:	443b      	add	r3, r7
 8005e9a:	429d      	cmp	r5, r3
 8005e9c:	bf38      	it	cc
 8005e9e:	461d      	movcc	r5, r3
 8005ea0:	0553      	lsls	r3, r2, #21
 8005ea2:	d530      	bpl.n	8005f06 <__ssputs_r+0x9e>
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	f000 fb21 	bl	80064ec <_malloc_r>
 8005eaa:	4606      	mov	r6, r0
 8005eac:	b950      	cbnz	r0, 8005ec4 <__ssputs_r+0x5c>
 8005eae:	230c      	movs	r3, #12
 8005eb0:	f8ca 3000 	str.w	r3, [sl]
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec4:	463a      	mov	r2, r7
 8005ec6:	6921      	ldr	r1, [r4, #16]
 8005ec8:	f7ff ff9a 	bl	8005e00 <memcpy>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed6:	81a3      	strh	r3, [r4, #12]
 8005ed8:	6126      	str	r6, [r4, #16]
 8005eda:	6165      	str	r5, [r4, #20]
 8005edc:	443e      	add	r6, r7
 8005ede:	1bed      	subs	r5, r5, r7
 8005ee0:	6026      	str	r6, [r4, #0]
 8005ee2:	60a5      	str	r5, [r4, #8]
 8005ee4:	464e      	mov	r6, r9
 8005ee6:	454e      	cmp	r6, r9
 8005ee8:	d900      	bls.n	8005eec <__ssputs_r+0x84>
 8005eea:	464e      	mov	r6, r9
 8005eec:	4632      	mov	r2, r6
 8005eee:	4641      	mov	r1, r8
 8005ef0:	6820      	ldr	r0, [r4, #0]
 8005ef2:	f000 fa93 	bl	800641c <memmove>
 8005ef6:	68a3      	ldr	r3, [r4, #8]
 8005ef8:	1b9b      	subs	r3, r3, r6
 8005efa:	60a3      	str	r3, [r4, #8]
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	441e      	add	r6, r3
 8005f00:	6026      	str	r6, [r4, #0]
 8005f02:	2000      	movs	r0, #0
 8005f04:	e7dc      	b.n	8005ec0 <__ssputs_r+0x58>
 8005f06:	462a      	mov	r2, r5
 8005f08:	f000 fb4a 	bl	80065a0 <_realloc_r>
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d1e2      	bne.n	8005ed8 <__ssputs_r+0x70>
 8005f12:	6921      	ldr	r1, [r4, #16]
 8005f14:	4650      	mov	r0, sl
 8005f16:	f000 fa9b 	bl	8006450 <_free_r>
 8005f1a:	e7c8      	b.n	8005eae <__ssputs_r+0x46>

08005f1c <_svfiprintf_r>:
 8005f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f20:	461d      	mov	r5, r3
 8005f22:	898b      	ldrh	r3, [r1, #12]
 8005f24:	061f      	lsls	r7, r3, #24
 8005f26:	b09d      	sub	sp, #116	; 0x74
 8005f28:	4680      	mov	r8, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	4616      	mov	r6, r2
 8005f2e:	d50f      	bpl.n	8005f50 <_svfiprintf_r+0x34>
 8005f30:	690b      	ldr	r3, [r1, #16]
 8005f32:	b96b      	cbnz	r3, 8005f50 <_svfiprintf_r+0x34>
 8005f34:	2140      	movs	r1, #64	; 0x40
 8005f36:	f000 fad9 	bl	80064ec <_malloc_r>
 8005f3a:	6020      	str	r0, [r4, #0]
 8005f3c:	6120      	str	r0, [r4, #16]
 8005f3e:	b928      	cbnz	r0, 8005f4c <_svfiprintf_r+0x30>
 8005f40:	230c      	movs	r3, #12
 8005f42:	f8c8 3000 	str.w	r3, [r8]
 8005f46:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4a:	e0c8      	b.n	80060de <_svfiprintf_r+0x1c2>
 8005f4c:	2340      	movs	r3, #64	; 0x40
 8005f4e:	6163      	str	r3, [r4, #20]
 8005f50:	2300      	movs	r3, #0
 8005f52:	9309      	str	r3, [sp, #36]	; 0x24
 8005f54:	2320      	movs	r3, #32
 8005f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f5a:	2330      	movs	r3, #48	; 0x30
 8005f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f60:	9503      	str	r5, [sp, #12]
 8005f62:	f04f 0b01 	mov.w	fp, #1
 8005f66:	4637      	mov	r7, r6
 8005f68:	463d      	mov	r5, r7
 8005f6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f6e:	b10b      	cbz	r3, 8005f74 <_svfiprintf_r+0x58>
 8005f70:	2b25      	cmp	r3, #37	; 0x25
 8005f72:	d13e      	bne.n	8005ff2 <_svfiprintf_r+0xd6>
 8005f74:	ebb7 0a06 	subs.w	sl, r7, r6
 8005f78:	d00b      	beq.n	8005f92 <_svfiprintf_r+0x76>
 8005f7a:	4653      	mov	r3, sl
 8005f7c:	4632      	mov	r2, r6
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4640      	mov	r0, r8
 8005f82:	f7ff ff71 	bl	8005e68 <__ssputs_r>
 8005f86:	3001      	adds	r0, #1
 8005f88:	f000 80a4 	beq.w	80060d4 <_svfiprintf_r+0x1b8>
 8005f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8e:	4453      	add	r3, sl
 8005f90:	9309      	str	r3, [sp, #36]	; 0x24
 8005f92:	783b      	ldrb	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 809d 	beq.w	80060d4 <_svfiprintf_r+0x1b8>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fa4:	9304      	str	r3, [sp, #16]
 8005fa6:	9307      	str	r3, [sp, #28]
 8005fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fac:	931a      	str	r3, [sp, #104]	; 0x68
 8005fae:	462f      	mov	r7, r5
 8005fb0:	2205      	movs	r2, #5
 8005fb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005fb6:	4850      	ldr	r0, [pc, #320]	; (80060f8 <_svfiprintf_r+0x1dc>)
 8005fb8:	f7fa f91a 	bl	80001f0 <memchr>
 8005fbc:	9b04      	ldr	r3, [sp, #16]
 8005fbe:	b9d0      	cbnz	r0, 8005ff6 <_svfiprintf_r+0xda>
 8005fc0:	06d9      	lsls	r1, r3, #27
 8005fc2:	bf44      	itt	mi
 8005fc4:	2220      	movmi	r2, #32
 8005fc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fca:	071a      	lsls	r2, r3, #28
 8005fcc:	bf44      	itt	mi
 8005fce:	222b      	movmi	r2, #43	; 0x2b
 8005fd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fd4:	782a      	ldrb	r2, [r5, #0]
 8005fd6:	2a2a      	cmp	r2, #42	; 0x2a
 8005fd8:	d015      	beq.n	8006006 <_svfiprintf_r+0xea>
 8005fda:	9a07      	ldr	r2, [sp, #28]
 8005fdc:	462f      	mov	r7, r5
 8005fde:	2000      	movs	r0, #0
 8005fe0:	250a      	movs	r5, #10
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fe8:	3b30      	subs	r3, #48	; 0x30
 8005fea:	2b09      	cmp	r3, #9
 8005fec:	d94d      	bls.n	800608a <_svfiprintf_r+0x16e>
 8005fee:	b1b8      	cbz	r0, 8006020 <_svfiprintf_r+0x104>
 8005ff0:	e00f      	b.n	8006012 <_svfiprintf_r+0xf6>
 8005ff2:	462f      	mov	r7, r5
 8005ff4:	e7b8      	b.n	8005f68 <_svfiprintf_r+0x4c>
 8005ff6:	4a40      	ldr	r2, [pc, #256]	; (80060f8 <_svfiprintf_r+0x1dc>)
 8005ff8:	1a80      	subs	r0, r0, r2
 8005ffa:	fa0b f000 	lsl.w	r0, fp, r0
 8005ffe:	4318      	orrs	r0, r3
 8006000:	9004      	str	r0, [sp, #16]
 8006002:	463d      	mov	r5, r7
 8006004:	e7d3      	b.n	8005fae <_svfiprintf_r+0x92>
 8006006:	9a03      	ldr	r2, [sp, #12]
 8006008:	1d11      	adds	r1, r2, #4
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	9103      	str	r1, [sp, #12]
 800600e:	2a00      	cmp	r2, #0
 8006010:	db01      	blt.n	8006016 <_svfiprintf_r+0xfa>
 8006012:	9207      	str	r2, [sp, #28]
 8006014:	e004      	b.n	8006020 <_svfiprintf_r+0x104>
 8006016:	4252      	negs	r2, r2
 8006018:	f043 0302 	orr.w	r3, r3, #2
 800601c:	9207      	str	r2, [sp, #28]
 800601e:	9304      	str	r3, [sp, #16]
 8006020:	783b      	ldrb	r3, [r7, #0]
 8006022:	2b2e      	cmp	r3, #46	; 0x2e
 8006024:	d10c      	bne.n	8006040 <_svfiprintf_r+0x124>
 8006026:	787b      	ldrb	r3, [r7, #1]
 8006028:	2b2a      	cmp	r3, #42	; 0x2a
 800602a:	d133      	bne.n	8006094 <_svfiprintf_r+0x178>
 800602c:	9b03      	ldr	r3, [sp, #12]
 800602e:	1d1a      	adds	r2, r3, #4
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	9203      	str	r2, [sp, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	bfb8      	it	lt
 8006038:	f04f 33ff 	movlt.w	r3, #4294967295
 800603c:	3702      	adds	r7, #2
 800603e:	9305      	str	r3, [sp, #20]
 8006040:	4d2e      	ldr	r5, [pc, #184]	; (80060fc <_svfiprintf_r+0x1e0>)
 8006042:	7839      	ldrb	r1, [r7, #0]
 8006044:	2203      	movs	r2, #3
 8006046:	4628      	mov	r0, r5
 8006048:	f7fa f8d2 	bl	80001f0 <memchr>
 800604c:	b138      	cbz	r0, 800605e <_svfiprintf_r+0x142>
 800604e:	2340      	movs	r3, #64	; 0x40
 8006050:	1b40      	subs	r0, r0, r5
 8006052:	fa03 f000 	lsl.w	r0, r3, r0
 8006056:	9b04      	ldr	r3, [sp, #16]
 8006058:	4303      	orrs	r3, r0
 800605a:	3701      	adds	r7, #1
 800605c:	9304      	str	r3, [sp, #16]
 800605e:	7839      	ldrb	r1, [r7, #0]
 8006060:	4827      	ldr	r0, [pc, #156]	; (8006100 <_svfiprintf_r+0x1e4>)
 8006062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006066:	2206      	movs	r2, #6
 8006068:	1c7e      	adds	r6, r7, #1
 800606a:	f7fa f8c1 	bl	80001f0 <memchr>
 800606e:	2800      	cmp	r0, #0
 8006070:	d038      	beq.n	80060e4 <_svfiprintf_r+0x1c8>
 8006072:	4b24      	ldr	r3, [pc, #144]	; (8006104 <_svfiprintf_r+0x1e8>)
 8006074:	bb13      	cbnz	r3, 80060bc <_svfiprintf_r+0x1a0>
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	3307      	adds	r3, #7
 800607a:	f023 0307 	bic.w	r3, r3, #7
 800607e:	3308      	adds	r3, #8
 8006080:	9303      	str	r3, [sp, #12]
 8006082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006084:	444b      	add	r3, r9
 8006086:	9309      	str	r3, [sp, #36]	; 0x24
 8006088:	e76d      	b.n	8005f66 <_svfiprintf_r+0x4a>
 800608a:	fb05 3202 	mla	r2, r5, r2, r3
 800608e:	2001      	movs	r0, #1
 8006090:	460f      	mov	r7, r1
 8006092:	e7a6      	b.n	8005fe2 <_svfiprintf_r+0xc6>
 8006094:	2300      	movs	r3, #0
 8006096:	3701      	adds	r7, #1
 8006098:	9305      	str	r3, [sp, #20]
 800609a:	4619      	mov	r1, r3
 800609c:	250a      	movs	r5, #10
 800609e:	4638      	mov	r0, r7
 80060a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060a4:	3a30      	subs	r2, #48	; 0x30
 80060a6:	2a09      	cmp	r2, #9
 80060a8:	d903      	bls.n	80060b2 <_svfiprintf_r+0x196>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0c8      	beq.n	8006040 <_svfiprintf_r+0x124>
 80060ae:	9105      	str	r1, [sp, #20]
 80060b0:	e7c6      	b.n	8006040 <_svfiprintf_r+0x124>
 80060b2:	fb05 2101 	mla	r1, r5, r1, r2
 80060b6:	2301      	movs	r3, #1
 80060b8:	4607      	mov	r7, r0
 80060ba:	e7f0      	b.n	800609e <_svfiprintf_r+0x182>
 80060bc:	ab03      	add	r3, sp, #12
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	4622      	mov	r2, r4
 80060c2:	4b11      	ldr	r3, [pc, #68]	; (8006108 <_svfiprintf_r+0x1ec>)
 80060c4:	a904      	add	r1, sp, #16
 80060c6:	4640      	mov	r0, r8
 80060c8:	f3af 8000 	nop.w
 80060cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80060d0:	4681      	mov	r9, r0
 80060d2:	d1d6      	bne.n	8006082 <_svfiprintf_r+0x166>
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	065b      	lsls	r3, r3, #25
 80060d8:	f53f af35 	bmi.w	8005f46 <_svfiprintf_r+0x2a>
 80060dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060de:	b01d      	add	sp, #116	; 0x74
 80060e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e4:	ab03      	add	r3, sp, #12
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	4622      	mov	r2, r4
 80060ea:	4b07      	ldr	r3, [pc, #28]	; (8006108 <_svfiprintf_r+0x1ec>)
 80060ec:	a904      	add	r1, sp, #16
 80060ee:	4640      	mov	r0, r8
 80060f0:	f000 f882 	bl	80061f8 <_printf_i>
 80060f4:	e7ea      	b.n	80060cc <_svfiprintf_r+0x1b0>
 80060f6:	bf00      	nop
 80060f8:	08006788 	.word	0x08006788
 80060fc:	0800678e 	.word	0x0800678e
 8006100:	08006792 	.word	0x08006792
 8006104:	00000000 	.word	0x00000000
 8006108:	08005e69 	.word	0x08005e69

0800610c <_printf_common>:
 800610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	4691      	mov	r9, r2
 8006112:	461f      	mov	r7, r3
 8006114:	688a      	ldr	r2, [r1, #8]
 8006116:	690b      	ldr	r3, [r1, #16]
 8006118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800611c:	4293      	cmp	r3, r2
 800611e:	bfb8      	it	lt
 8006120:	4613      	movlt	r3, r2
 8006122:	f8c9 3000 	str.w	r3, [r9]
 8006126:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800612a:	4606      	mov	r6, r0
 800612c:	460c      	mov	r4, r1
 800612e:	b112      	cbz	r2, 8006136 <_printf_common+0x2a>
 8006130:	3301      	adds	r3, #1
 8006132:	f8c9 3000 	str.w	r3, [r9]
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	0699      	lsls	r1, r3, #26
 800613a:	bf42      	ittt	mi
 800613c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006140:	3302      	addmi	r3, #2
 8006142:	f8c9 3000 	strmi.w	r3, [r9]
 8006146:	6825      	ldr	r5, [r4, #0]
 8006148:	f015 0506 	ands.w	r5, r5, #6
 800614c:	d107      	bne.n	800615e <_printf_common+0x52>
 800614e:	f104 0a19 	add.w	sl, r4, #25
 8006152:	68e3      	ldr	r3, [r4, #12]
 8006154:	f8d9 2000 	ldr.w	r2, [r9]
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	42ab      	cmp	r3, r5
 800615c:	dc28      	bgt.n	80061b0 <_printf_common+0xa4>
 800615e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006162:	6822      	ldr	r2, [r4, #0]
 8006164:	3300      	adds	r3, #0
 8006166:	bf18      	it	ne
 8006168:	2301      	movne	r3, #1
 800616a:	0692      	lsls	r2, r2, #26
 800616c:	d42d      	bmi.n	80061ca <_printf_common+0xbe>
 800616e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006172:	4639      	mov	r1, r7
 8006174:	4630      	mov	r0, r6
 8006176:	47c0      	blx	r8
 8006178:	3001      	adds	r0, #1
 800617a:	d020      	beq.n	80061be <_printf_common+0xb2>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	68e5      	ldr	r5, [r4, #12]
 8006180:	f8d9 2000 	ldr.w	r2, [r9]
 8006184:	f003 0306 	and.w	r3, r3, #6
 8006188:	2b04      	cmp	r3, #4
 800618a:	bf08      	it	eq
 800618c:	1aad      	subeq	r5, r5, r2
 800618e:	68a3      	ldr	r3, [r4, #8]
 8006190:	6922      	ldr	r2, [r4, #16]
 8006192:	bf0c      	ite	eq
 8006194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006198:	2500      	movne	r5, #0
 800619a:	4293      	cmp	r3, r2
 800619c:	bfc4      	itt	gt
 800619e:	1a9b      	subgt	r3, r3, r2
 80061a0:	18ed      	addgt	r5, r5, r3
 80061a2:	f04f 0900 	mov.w	r9, #0
 80061a6:	341a      	adds	r4, #26
 80061a8:	454d      	cmp	r5, r9
 80061aa:	d11a      	bne.n	80061e2 <_printf_common+0xd6>
 80061ac:	2000      	movs	r0, #0
 80061ae:	e008      	b.n	80061c2 <_printf_common+0xb6>
 80061b0:	2301      	movs	r3, #1
 80061b2:	4652      	mov	r2, sl
 80061b4:	4639      	mov	r1, r7
 80061b6:	4630      	mov	r0, r6
 80061b8:	47c0      	blx	r8
 80061ba:	3001      	adds	r0, #1
 80061bc:	d103      	bne.n	80061c6 <_printf_common+0xba>
 80061be:	f04f 30ff 	mov.w	r0, #4294967295
 80061c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c6:	3501      	adds	r5, #1
 80061c8:	e7c3      	b.n	8006152 <_printf_common+0x46>
 80061ca:	18e1      	adds	r1, r4, r3
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	2030      	movs	r0, #48	; 0x30
 80061d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061d4:	4422      	add	r2, r4
 80061d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061de:	3302      	adds	r3, #2
 80061e0:	e7c5      	b.n	800616e <_printf_common+0x62>
 80061e2:	2301      	movs	r3, #1
 80061e4:	4622      	mov	r2, r4
 80061e6:	4639      	mov	r1, r7
 80061e8:	4630      	mov	r0, r6
 80061ea:	47c0      	blx	r8
 80061ec:	3001      	adds	r0, #1
 80061ee:	d0e6      	beq.n	80061be <_printf_common+0xb2>
 80061f0:	f109 0901 	add.w	r9, r9, #1
 80061f4:	e7d8      	b.n	80061a8 <_printf_common+0x9c>
	...

080061f8 <_printf_i>:
 80061f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006200:	460c      	mov	r4, r1
 8006202:	7e09      	ldrb	r1, [r1, #24]
 8006204:	b085      	sub	sp, #20
 8006206:	296e      	cmp	r1, #110	; 0x6e
 8006208:	4617      	mov	r7, r2
 800620a:	4606      	mov	r6, r0
 800620c:	4698      	mov	r8, r3
 800620e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006210:	f000 80b3 	beq.w	800637a <_printf_i+0x182>
 8006214:	d822      	bhi.n	800625c <_printf_i+0x64>
 8006216:	2963      	cmp	r1, #99	; 0x63
 8006218:	d036      	beq.n	8006288 <_printf_i+0x90>
 800621a:	d80a      	bhi.n	8006232 <_printf_i+0x3a>
 800621c:	2900      	cmp	r1, #0
 800621e:	f000 80b9 	beq.w	8006394 <_printf_i+0x19c>
 8006222:	2958      	cmp	r1, #88	; 0x58
 8006224:	f000 8083 	beq.w	800632e <_printf_i+0x136>
 8006228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800622c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006230:	e032      	b.n	8006298 <_printf_i+0xa0>
 8006232:	2964      	cmp	r1, #100	; 0x64
 8006234:	d001      	beq.n	800623a <_printf_i+0x42>
 8006236:	2969      	cmp	r1, #105	; 0x69
 8006238:	d1f6      	bne.n	8006228 <_printf_i+0x30>
 800623a:	6820      	ldr	r0, [r4, #0]
 800623c:	6813      	ldr	r3, [r2, #0]
 800623e:	0605      	lsls	r5, r0, #24
 8006240:	f103 0104 	add.w	r1, r3, #4
 8006244:	d52a      	bpl.n	800629c <_printf_i+0xa4>
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6011      	str	r1, [r2, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	da03      	bge.n	8006256 <_printf_i+0x5e>
 800624e:	222d      	movs	r2, #45	; 0x2d
 8006250:	425b      	negs	r3, r3
 8006252:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006256:	486f      	ldr	r0, [pc, #444]	; (8006414 <_printf_i+0x21c>)
 8006258:	220a      	movs	r2, #10
 800625a:	e039      	b.n	80062d0 <_printf_i+0xd8>
 800625c:	2973      	cmp	r1, #115	; 0x73
 800625e:	f000 809d 	beq.w	800639c <_printf_i+0x1a4>
 8006262:	d808      	bhi.n	8006276 <_printf_i+0x7e>
 8006264:	296f      	cmp	r1, #111	; 0x6f
 8006266:	d020      	beq.n	80062aa <_printf_i+0xb2>
 8006268:	2970      	cmp	r1, #112	; 0x70
 800626a:	d1dd      	bne.n	8006228 <_printf_i+0x30>
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	f043 0320 	orr.w	r3, r3, #32
 8006272:	6023      	str	r3, [r4, #0]
 8006274:	e003      	b.n	800627e <_printf_i+0x86>
 8006276:	2975      	cmp	r1, #117	; 0x75
 8006278:	d017      	beq.n	80062aa <_printf_i+0xb2>
 800627a:	2978      	cmp	r1, #120	; 0x78
 800627c:	d1d4      	bne.n	8006228 <_printf_i+0x30>
 800627e:	2378      	movs	r3, #120	; 0x78
 8006280:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006284:	4864      	ldr	r0, [pc, #400]	; (8006418 <_printf_i+0x220>)
 8006286:	e055      	b.n	8006334 <_printf_i+0x13c>
 8006288:	6813      	ldr	r3, [r2, #0]
 800628a:	1d19      	adds	r1, r3, #4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6011      	str	r1, [r2, #0]
 8006290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006298:	2301      	movs	r3, #1
 800629a:	e08c      	b.n	80063b6 <_printf_i+0x1be>
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6011      	str	r1, [r2, #0]
 80062a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062a4:	bf18      	it	ne
 80062a6:	b21b      	sxthne	r3, r3
 80062a8:	e7cf      	b.n	800624a <_printf_i+0x52>
 80062aa:	6813      	ldr	r3, [r2, #0]
 80062ac:	6825      	ldr	r5, [r4, #0]
 80062ae:	1d18      	adds	r0, r3, #4
 80062b0:	6010      	str	r0, [r2, #0]
 80062b2:	0628      	lsls	r0, r5, #24
 80062b4:	d501      	bpl.n	80062ba <_printf_i+0xc2>
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	e002      	b.n	80062c0 <_printf_i+0xc8>
 80062ba:	0668      	lsls	r0, r5, #25
 80062bc:	d5fb      	bpl.n	80062b6 <_printf_i+0xbe>
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	4854      	ldr	r0, [pc, #336]	; (8006414 <_printf_i+0x21c>)
 80062c2:	296f      	cmp	r1, #111	; 0x6f
 80062c4:	bf14      	ite	ne
 80062c6:	220a      	movne	r2, #10
 80062c8:	2208      	moveq	r2, #8
 80062ca:	2100      	movs	r1, #0
 80062cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062d0:	6865      	ldr	r5, [r4, #4]
 80062d2:	60a5      	str	r5, [r4, #8]
 80062d4:	2d00      	cmp	r5, #0
 80062d6:	f2c0 8095 	blt.w	8006404 <_printf_i+0x20c>
 80062da:	6821      	ldr	r1, [r4, #0]
 80062dc:	f021 0104 	bic.w	r1, r1, #4
 80062e0:	6021      	str	r1, [r4, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d13d      	bne.n	8006362 <_printf_i+0x16a>
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	f040 808e 	bne.w	8006408 <_printf_i+0x210>
 80062ec:	4665      	mov	r5, ip
 80062ee:	2a08      	cmp	r2, #8
 80062f0:	d10b      	bne.n	800630a <_printf_i+0x112>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	07db      	lsls	r3, r3, #31
 80062f6:	d508      	bpl.n	800630a <_printf_i+0x112>
 80062f8:	6923      	ldr	r3, [r4, #16]
 80062fa:	6862      	ldr	r2, [r4, #4]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	bfde      	ittt	le
 8006300:	2330      	movle	r3, #48	; 0x30
 8006302:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006306:	f105 35ff 	addle.w	r5, r5, #4294967295
 800630a:	ebac 0305 	sub.w	r3, ip, r5
 800630e:	6123      	str	r3, [r4, #16]
 8006310:	f8cd 8000 	str.w	r8, [sp]
 8006314:	463b      	mov	r3, r7
 8006316:	aa03      	add	r2, sp, #12
 8006318:	4621      	mov	r1, r4
 800631a:	4630      	mov	r0, r6
 800631c:	f7ff fef6 	bl	800610c <_printf_common>
 8006320:	3001      	adds	r0, #1
 8006322:	d14d      	bne.n	80063c0 <_printf_i+0x1c8>
 8006324:	f04f 30ff 	mov.w	r0, #4294967295
 8006328:	b005      	add	sp, #20
 800632a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800632e:	4839      	ldr	r0, [pc, #228]	; (8006414 <_printf_i+0x21c>)
 8006330:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006334:	6813      	ldr	r3, [r2, #0]
 8006336:	6821      	ldr	r1, [r4, #0]
 8006338:	1d1d      	adds	r5, r3, #4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6015      	str	r5, [r2, #0]
 800633e:	060a      	lsls	r2, r1, #24
 8006340:	d50b      	bpl.n	800635a <_printf_i+0x162>
 8006342:	07ca      	lsls	r2, r1, #31
 8006344:	bf44      	itt	mi
 8006346:	f041 0120 	orrmi.w	r1, r1, #32
 800634a:	6021      	strmi	r1, [r4, #0]
 800634c:	b91b      	cbnz	r3, 8006356 <_printf_i+0x15e>
 800634e:	6822      	ldr	r2, [r4, #0]
 8006350:	f022 0220 	bic.w	r2, r2, #32
 8006354:	6022      	str	r2, [r4, #0]
 8006356:	2210      	movs	r2, #16
 8006358:	e7b7      	b.n	80062ca <_printf_i+0xd2>
 800635a:	064d      	lsls	r5, r1, #25
 800635c:	bf48      	it	mi
 800635e:	b29b      	uxthmi	r3, r3
 8006360:	e7ef      	b.n	8006342 <_printf_i+0x14a>
 8006362:	4665      	mov	r5, ip
 8006364:	fbb3 f1f2 	udiv	r1, r3, r2
 8006368:	fb02 3311 	mls	r3, r2, r1, r3
 800636c:	5cc3      	ldrb	r3, [r0, r3]
 800636e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006372:	460b      	mov	r3, r1
 8006374:	2900      	cmp	r1, #0
 8006376:	d1f5      	bne.n	8006364 <_printf_i+0x16c>
 8006378:	e7b9      	b.n	80062ee <_printf_i+0xf6>
 800637a:	6813      	ldr	r3, [r2, #0]
 800637c:	6825      	ldr	r5, [r4, #0]
 800637e:	6961      	ldr	r1, [r4, #20]
 8006380:	1d18      	adds	r0, r3, #4
 8006382:	6010      	str	r0, [r2, #0]
 8006384:	0628      	lsls	r0, r5, #24
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	d501      	bpl.n	800638e <_printf_i+0x196>
 800638a:	6019      	str	r1, [r3, #0]
 800638c:	e002      	b.n	8006394 <_printf_i+0x19c>
 800638e:	066a      	lsls	r2, r5, #25
 8006390:	d5fb      	bpl.n	800638a <_printf_i+0x192>
 8006392:	8019      	strh	r1, [r3, #0]
 8006394:	2300      	movs	r3, #0
 8006396:	6123      	str	r3, [r4, #16]
 8006398:	4665      	mov	r5, ip
 800639a:	e7b9      	b.n	8006310 <_printf_i+0x118>
 800639c:	6813      	ldr	r3, [r2, #0]
 800639e:	1d19      	adds	r1, r3, #4
 80063a0:	6011      	str	r1, [r2, #0]
 80063a2:	681d      	ldr	r5, [r3, #0]
 80063a4:	6862      	ldr	r2, [r4, #4]
 80063a6:	2100      	movs	r1, #0
 80063a8:	4628      	mov	r0, r5
 80063aa:	f7f9 ff21 	bl	80001f0 <memchr>
 80063ae:	b108      	cbz	r0, 80063b4 <_printf_i+0x1bc>
 80063b0:	1b40      	subs	r0, r0, r5
 80063b2:	6060      	str	r0, [r4, #4]
 80063b4:	6863      	ldr	r3, [r4, #4]
 80063b6:	6123      	str	r3, [r4, #16]
 80063b8:	2300      	movs	r3, #0
 80063ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063be:	e7a7      	b.n	8006310 <_printf_i+0x118>
 80063c0:	6923      	ldr	r3, [r4, #16]
 80063c2:	462a      	mov	r2, r5
 80063c4:	4639      	mov	r1, r7
 80063c6:	4630      	mov	r0, r6
 80063c8:	47c0      	blx	r8
 80063ca:	3001      	adds	r0, #1
 80063cc:	d0aa      	beq.n	8006324 <_printf_i+0x12c>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	079b      	lsls	r3, r3, #30
 80063d2:	d413      	bmi.n	80063fc <_printf_i+0x204>
 80063d4:	68e0      	ldr	r0, [r4, #12]
 80063d6:	9b03      	ldr	r3, [sp, #12]
 80063d8:	4298      	cmp	r0, r3
 80063da:	bfb8      	it	lt
 80063dc:	4618      	movlt	r0, r3
 80063de:	e7a3      	b.n	8006328 <_printf_i+0x130>
 80063e0:	2301      	movs	r3, #1
 80063e2:	464a      	mov	r2, r9
 80063e4:	4639      	mov	r1, r7
 80063e6:	4630      	mov	r0, r6
 80063e8:	47c0      	blx	r8
 80063ea:	3001      	adds	r0, #1
 80063ec:	d09a      	beq.n	8006324 <_printf_i+0x12c>
 80063ee:	3501      	adds	r5, #1
 80063f0:	68e3      	ldr	r3, [r4, #12]
 80063f2:	9a03      	ldr	r2, [sp, #12]
 80063f4:	1a9b      	subs	r3, r3, r2
 80063f6:	42ab      	cmp	r3, r5
 80063f8:	dcf2      	bgt.n	80063e0 <_printf_i+0x1e8>
 80063fa:	e7eb      	b.n	80063d4 <_printf_i+0x1dc>
 80063fc:	2500      	movs	r5, #0
 80063fe:	f104 0919 	add.w	r9, r4, #25
 8006402:	e7f5      	b.n	80063f0 <_printf_i+0x1f8>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1ac      	bne.n	8006362 <_printf_i+0x16a>
 8006408:	7803      	ldrb	r3, [r0, #0]
 800640a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800640e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006412:	e76c      	b.n	80062ee <_printf_i+0xf6>
 8006414:	08006799 	.word	0x08006799
 8006418:	080067aa 	.word	0x080067aa

0800641c <memmove>:
 800641c:	4288      	cmp	r0, r1
 800641e:	b510      	push	{r4, lr}
 8006420:	eb01 0302 	add.w	r3, r1, r2
 8006424:	d807      	bhi.n	8006436 <memmove+0x1a>
 8006426:	1e42      	subs	r2, r0, #1
 8006428:	4299      	cmp	r1, r3
 800642a:	d00a      	beq.n	8006442 <memmove+0x26>
 800642c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006430:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006434:	e7f8      	b.n	8006428 <memmove+0xc>
 8006436:	4283      	cmp	r3, r0
 8006438:	d9f5      	bls.n	8006426 <memmove+0xa>
 800643a:	1881      	adds	r1, r0, r2
 800643c:	1ad2      	subs	r2, r2, r3
 800643e:	42d3      	cmn	r3, r2
 8006440:	d100      	bne.n	8006444 <memmove+0x28>
 8006442:	bd10      	pop	{r4, pc}
 8006444:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006448:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800644c:	e7f7      	b.n	800643e <memmove+0x22>
	...

08006450 <_free_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4605      	mov	r5, r0
 8006454:	2900      	cmp	r1, #0
 8006456:	d045      	beq.n	80064e4 <_free_r+0x94>
 8006458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800645c:	1f0c      	subs	r4, r1, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	bfb8      	it	lt
 8006462:	18e4      	addlt	r4, r4, r3
 8006464:	f000 f8d2 	bl	800660c <__malloc_lock>
 8006468:	4a1f      	ldr	r2, [pc, #124]	; (80064e8 <_free_r+0x98>)
 800646a:	6813      	ldr	r3, [r2, #0]
 800646c:	4610      	mov	r0, r2
 800646e:	b933      	cbnz	r3, 800647e <_free_r+0x2e>
 8006470:	6063      	str	r3, [r4, #4]
 8006472:	6014      	str	r4, [r2, #0]
 8006474:	4628      	mov	r0, r5
 8006476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800647a:	f000 b8c8 	b.w	800660e <__malloc_unlock>
 800647e:	42a3      	cmp	r3, r4
 8006480:	d90c      	bls.n	800649c <_free_r+0x4c>
 8006482:	6821      	ldr	r1, [r4, #0]
 8006484:	1862      	adds	r2, r4, r1
 8006486:	4293      	cmp	r3, r2
 8006488:	bf04      	itt	eq
 800648a:	681a      	ldreq	r2, [r3, #0]
 800648c:	685b      	ldreq	r3, [r3, #4]
 800648e:	6063      	str	r3, [r4, #4]
 8006490:	bf04      	itt	eq
 8006492:	1852      	addeq	r2, r2, r1
 8006494:	6022      	streq	r2, [r4, #0]
 8006496:	6004      	str	r4, [r0, #0]
 8006498:	e7ec      	b.n	8006474 <_free_r+0x24>
 800649a:	4613      	mov	r3, r2
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	b10a      	cbz	r2, 80064a4 <_free_r+0x54>
 80064a0:	42a2      	cmp	r2, r4
 80064a2:	d9fa      	bls.n	800649a <_free_r+0x4a>
 80064a4:	6819      	ldr	r1, [r3, #0]
 80064a6:	1858      	adds	r0, r3, r1
 80064a8:	42a0      	cmp	r0, r4
 80064aa:	d10b      	bne.n	80064c4 <_free_r+0x74>
 80064ac:	6820      	ldr	r0, [r4, #0]
 80064ae:	4401      	add	r1, r0
 80064b0:	1858      	adds	r0, r3, r1
 80064b2:	4282      	cmp	r2, r0
 80064b4:	6019      	str	r1, [r3, #0]
 80064b6:	d1dd      	bne.n	8006474 <_free_r+0x24>
 80064b8:	6810      	ldr	r0, [r2, #0]
 80064ba:	6852      	ldr	r2, [r2, #4]
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	4401      	add	r1, r0
 80064c0:	6019      	str	r1, [r3, #0]
 80064c2:	e7d7      	b.n	8006474 <_free_r+0x24>
 80064c4:	d902      	bls.n	80064cc <_free_r+0x7c>
 80064c6:	230c      	movs	r3, #12
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	e7d3      	b.n	8006474 <_free_r+0x24>
 80064cc:	6820      	ldr	r0, [r4, #0]
 80064ce:	1821      	adds	r1, r4, r0
 80064d0:	428a      	cmp	r2, r1
 80064d2:	bf04      	itt	eq
 80064d4:	6811      	ldreq	r1, [r2, #0]
 80064d6:	6852      	ldreq	r2, [r2, #4]
 80064d8:	6062      	str	r2, [r4, #4]
 80064da:	bf04      	itt	eq
 80064dc:	1809      	addeq	r1, r1, r0
 80064de:	6021      	streq	r1, [r4, #0]
 80064e0:	605c      	str	r4, [r3, #4]
 80064e2:	e7c7      	b.n	8006474 <_free_r+0x24>
 80064e4:	bd38      	pop	{r3, r4, r5, pc}
 80064e6:	bf00      	nop
 80064e8:	2000499c 	.word	0x2000499c

080064ec <_malloc_r>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	1ccd      	adds	r5, r1, #3
 80064f0:	f025 0503 	bic.w	r5, r5, #3
 80064f4:	3508      	adds	r5, #8
 80064f6:	2d0c      	cmp	r5, #12
 80064f8:	bf38      	it	cc
 80064fa:	250c      	movcc	r5, #12
 80064fc:	2d00      	cmp	r5, #0
 80064fe:	4606      	mov	r6, r0
 8006500:	db01      	blt.n	8006506 <_malloc_r+0x1a>
 8006502:	42a9      	cmp	r1, r5
 8006504:	d903      	bls.n	800650e <_malloc_r+0x22>
 8006506:	230c      	movs	r3, #12
 8006508:	6033      	str	r3, [r6, #0]
 800650a:	2000      	movs	r0, #0
 800650c:	bd70      	pop	{r4, r5, r6, pc}
 800650e:	f000 f87d 	bl	800660c <__malloc_lock>
 8006512:	4a21      	ldr	r2, [pc, #132]	; (8006598 <_malloc_r+0xac>)
 8006514:	6814      	ldr	r4, [r2, #0]
 8006516:	4621      	mov	r1, r4
 8006518:	b991      	cbnz	r1, 8006540 <_malloc_r+0x54>
 800651a:	4c20      	ldr	r4, [pc, #128]	; (800659c <_malloc_r+0xb0>)
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	b91b      	cbnz	r3, 8006528 <_malloc_r+0x3c>
 8006520:	4630      	mov	r0, r6
 8006522:	f000 f863 	bl	80065ec <_sbrk_r>
 8006526:	6020      	str	r0, [r4, #0]
 8006528:	4629      	mov	r1, r5
 800652a:	4630      	mov	r0, r6
 800652c:	f000 f85e 	bl	80065ec <_sbrk_r>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d124      	bne.n	800657e <_malloc_r+0x92>
 8006534:	230c      	movs	r3, #12
 8006536:	6033      	str	r3, [r6, #0]
 8006538:	4630      	mov	r0, r6
 800653a:	f000 f868 	bl	800660e <__malloc_unlock>
 800653e:	e7e4      	b.n	800650a <_malloc_r+0x1e>
 8006540:	680b      	ldr	r3, [r1, #0]
 8006542:	1b5b      	subs	r3, r3, r5
 8006544:	d418      	bmi.n	8006578 <_malloc_r+0x8c>
 8006546:	2b0b      	cmp	r3, #11
 8006548:	d90f      	bls.n	800656a <_malloc_r+0x7e>
 800654a:	600b      	str	r3, [r1, #0]
 800654c:	50cd      	str	r5, [r1, r3]
 800654e:	18cc      	adds	r4, r1, r3
 8006550:	4630      	mov	r0, r6
 8006552:	f000 f85c 	bl	800660e <__malloc_unlock>
 8006556:	f104 000b 	add.w	r0, r4, #11
 800655a:	1d23      	adds	r3, r4, #4
 800655c:	f020 0007 	bic.w	r0, r0, #7
 8006560:	1ac3      	subs	r3, r0, r3
 8006562:	d0d3      	beq.n	800650c <_malloc_r+0x20>
 8006564:	425a      	negs	r2, r3
 8006566:	50e2      	str	r2, [r4, r3]
 8006568:	e7d0      	b.n	800650c <_malloc_r+0x20>
 800656a:	428c      	cmp	r4, r1
 800656c:	684b      	ldr	r3, [r1, #4]
 800656e:	bf16      	itet	ne
 8006570:	6063      	strne	r3, [r4, #4]
 8006572:	6013      	streq	r3, [r2, #0]
 8006574:	460c      	movne	r4, r1
 8006576:	e7eb      	b.n	8006550 <_malloc_r+0x64>
 8006578:	460c      	mov	r4, r1
 800657a:	6849      	ldr	r1, [r1, #4]
 800657c:	e7cc      	b.n	8006518 <_malloc_r+0x2c>
 800657e:	1cc4      	adds	r4, r0, #3
 8006580:	f024 0403 	bic.w	r4, r4, #3
 8006584:	42a0      	cmp	r0, r4
 8006586:	d005      	beq.n	8006594 <_malloc_r+0xa8>
 8006588:	1a21      	subs	r1, r4, r0
 800658a:	4630      	mov	r0, r6
 800658c:	f000 f82e 	bl	80065ec <_sbrk_r>
 8006590:	3001      	adds	r0, #1
 8006592:	d0cf      	beq.n	8006534 <_malloc_r+0x48>
 8006594:	6025      	str	r5, [r4, #0]
 8006596:	e7db      	b.n	8006550 <_malloc_r+0x64>
 8006598:	2000499c 	.word	0x2000499c
 800659c:	200049a0 	.word	0x200049a0

080065a0 <_realloc_r>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	4607      	mov	r7, r0
 80065a4:	4614      	mov	r4, r2
 80065a6:	460e      	mov	r6, r1
 80065a8:	b921      	cbnz	r1, 80065b4 <_realloc_r+0x14>
 80065aa:	4611      	mov	r1, r2
 80065ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065b0:	f7ff bf9c 	b.w	80064ec <_malloc_r>
 80065b4:	b922      	cbnz	r2, 80065c0 <_realloc_r+0x20>
 80065b6:	f7ff ff4b 	bl	8006450 <_free_r>
 80065ba:	4625      	mov	r5, r4
 80065bc:	4628      	mov	r0, r5
 80065be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c0:	f000 f826 	bl	8006610 <_malloc_usable_size_r>
 80065c4:	42a0      	cmp	r0, r4
 80065c6:	d20f      	bcs.n	80065e8 <_realloc_r+0x48>
 80065c8:	4621      	mov	r1, r4
 80065ca:	4638      	mov	r0, r7
 80065cc:	f7ff ff8e 	bl	80064ec <_malloc_r>
 80065d0:	4605      	mov	r5, r0
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d0f2      	beq.n	80065bc <_realloc_r+0x1c>
 80065d6:	4631      	mov	r1, r6
 80065d8:	4622      	mov	r2, r4
 80065da:	f7ff fc11 	bl	8005e00 <memcpy>
 80065de:	4631      	mov	r1, r6
 80065e0:	4638      	mov	r0, r7
 80065e2:	f7ff ff35 	bl	8006450 <_free_r>
 80065e6:	e7e9      	b.n	80065bc <_realloc_r+0x1c>
 80065e8:	4635      	mov	r5, r6
 80065ea:	e7e7      	b.n	80065bc <_realloc_r+0x1c>

080065ec <_sbrk_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4c06      	ldr	r4, [pc, #24]	; (8006608 <_sbrk_r+0x1c>)
 80065f0:	2300      	movs	r3, #0
 80065f2:	4605      	mov	r5, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	6023      	str	r3, [r4, #0]
 80065f8:	f7fa fde4 	bl	80011c4 <_sbrk>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_sbrk_r+0x1a>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	b103      	cbz	r3, 8006606 <_sbrk_r+0x1a>
 8006604:	602b      	str	r3, [r5, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	20004e88 	.word	0x20004e88

0800660c <__malloc_lock>:
 800660c:	4770      	bx	lr

0800660e <__malloc_unlock>:
 800660e:	4770      	bx	lr

08006610 <_malloc_usable_size_r>:
 8006610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006614:	1f18      	subs	r0, r3, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	bfbc      	itt	lt
 800661a:	580b      	ldrlt	r3, [r1, r0]
 800661c:	18c0      	addlt	r0, r0, r3
 800661e:	4770      	bx	lr

08006620 <_init>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	bf00      	nop
 8006624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006626:	bc08      	pop	{r3}
 8006628:	469e      	mov	lr, r3
 800662a:	4770      	bx	lr

0800662c <_fini>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	bf00      	nop
 8006630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006632:	bc08      	pop	{r3}
 8006634:	469e      	mov	lr, r3
 8006636:	4770      	bx	lr
